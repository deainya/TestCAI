Создай простое приложение на Python "Запрос на обслуживание" для деплоя на Streamlit Community Cloud.

1. В приложении реализован чат-интерфейс (преимущественно мобильная версия), где пользователь последовательно вводит сообщения, информируя о проблеме. На основе информации о проблеме приложение формирует запрос на обслуживание/ремонт. При формировании запроса на обслуживание необходимо его вывести пользователю и получить согласие.

2. На главный экран должен быть ввод email пользователя. Пользователь должен ввести корректный email (валидация формата), иначе чат и форма заявки не показываются. Сохрани email пользователя в st.session_state для дальнейшего использования. После ввода email показывай чат-интерфейс для сбора запроса на обслуживание/ремонт.

3. Также должны быть реализованы функции, которые получают данные из чат строки и отправляют POST-запрос с JSON в N8N на внешний URL из переменной окружения `N8N_WEBHOOK_URL`. В N8N будет происходить анализ запроса пользователя в LLM и возвращаться ответ от LLM из N8N (это также нужно сделать через соответствующий HTTP запрос). Обрабатывай возможные ошибки (таймаут, ошибка подключения, статус ответа) и возвращай статус успеха или ошибки. При успешной отправке показывай пользователю уведомление.



Исходный промпт-пример:
Создай простое приложение на Python с использованием Streamlit.
В приложении реализован чат-интерфейс (преимущественно мобильная версия), где пользователь последовательно вводит сообщения.
Используй OpenAI API для обработки сообщений: отправляй все сообщения пользователя и ассистента в модель.
Ассистент должен задать один общий вопрос и с помощью OpenAI определить данные заявки о ремонте: тип оборудования, номер устройства, описание проблемы, дата инцидента и опционально фото (URL). Если какой-то из обязательных пунктов не был определен, необходимо задать уточняющие вопросы.
При формировании заявки необходимо ее вывести пользователю и получить согласие.
Добавь проверку наличия API ключа через переменные окружения или st.secrets, чтобы подключить OpenAI.

В существующее Streamlit приложение добавь на главный экран ввод email пользователя.
Пользователь должен ввести корректный email (валидация формата), иначе чат и форма заявки не показываются.
Сохрани email пользователя в st.session_state для дальнейшего использования.
После ввода email показывай чат-интерфейс для сбора заявки через OpenAI API.

Добавь на страницу элемент для загрузки изображения с поддержкой форматов png, jpg, jpeg.
После загрузки фото конвертируй его в base64 и загружай на ImgBB через их API.
Сохраняй URL загруженного фото в состоянии приложения и показывай пользователю подтверждение успешной загрузки.
Фото должно быть доступно для включения в состав заявки, которую формирует ассистент.

Добавь функцию, которая принимает данные сформированной заявки и сохраняет их в CSV файл локально.
В CSV должны быть колонки: ID заявки, email, тип оборудования, номер устройства, описание проблемы, дата инцидента, URL фото, дата отправки заявки.
При первую запись создавай новый файл с заголовками, дальше дописывай данные построчно.

Добавь функцию, которая принимает данные заявки и отправляет POST-запрос с JSON на внешний URL из переменной окружения `N8N_WEBHOOK_URL`.
Обрабатывай возможные ошибки (таймаут, ошибка подключения, статус ответа) и возвращай статус успеха или ошибки.
При успешной отправке показывай пользователю уведомление (внешний URL используется для отправки на почту).
