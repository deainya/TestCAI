> Рабочий вариант 1 - интеграция с n8n (а в нем с LLM):
Создай простое приложение на Python для деплоя на Streamlit Community Cloud.
В приложении реализован чат-интерфейс (преимущественно мобильная версия), где пользователь последовательно вводит сообщения и вопросы ассистенту. Ассистент отвечает на вопросы пользователя. Для обработки сообщений и ответов пользователя и ассистента используется LLM. Интеграция с LLM выполнена на платформе n8n. А приложение интегрируется с n8n для обработки запросов пользователя и предоставления ответов ассистента. Для интеграции используй переменную окружения `N8N_WEBHOOK_URL` в Streamlit Community Cloud.


> Вариант 2:
Создай приложение на Python "Запрос на обслуживание" для деплоя на Streamlit Community Cloud.

1. В приложении реализован чат-интерфейс (преимущественно мобильная версия), где пользователь последовательно вводит сообщения ассистенту, информируя о проблеме. Ассистент отвечает на запросы пользователя. Ассистент должен начать с общего вопроса: "Добрый день, чем могу помочь?" и на основе данных из запросов пользователя собрать данные о проблеме: тип оборудования, номер устройства, описание проблемы, дата инцидента и опционально фото (URL). Если какой-то из обязательных пунктов не был определен, ассистенту необходимо задать соответствующие уточняющие вопросы пользователю.

2. Для обработки сообщений и ответов пользователя и ассистента используется LLM. Интеграция с LLM выполнена на платформе n8n. Приложение интегрируется с n8n для обработки запросов пользователя и предоставления ответов ассистента. Для интеграции используй переменную окружения `N8N_WEBHOOK_URL` в Streamlit Community Cloud.

3. На основе информации о проблеме приложение формирует итоговый сводный запрос на обслуживание (для устранения проблемы, возникшей у пользователя). Перед отправкой итогового запроса на обслуживание, его необходимо вывести пользователю и получить согласие.

4. На главном экране должен быть ввод email пользователя. Пользователь должен ввести корректный email (валидация формата), иначе чат и форма запроса не показываются. Сохрани email пользователя в st.session_state для дальнейшего использования. После ввода email показывай чат-интерфейс для сбора информации по запросу на обслуживание.

5. В части интеграции с n8n обрабатывай возможные ошибки (таймаут, ошибка подключения, статус ответа) и возвращай статус успеха или ошибки. При успешной отправке показывай пользователю уведомление.



> Исходный промпт-пример:
Создай простое приложение на Python с использованием Streamlit.
В приложении реализован чат-интерфейс (преимущественно мобильная версия), где пользователь последовательно вводит сообщения.
Используй OpenAI API для обработки сообщений: отправляй все сообщения пользователя и ассистента в модель.
Ассистент должен задать один общий вопрос и с помощью OpenAI определить данные заявки о ремонте: тип оборудования, номер устройства, описание проблемы, дата инцидента и опционально фото (URL). Если какой-то из обязательных пунктов не был определен, необходимо задать уточняющие вопросы.
При формировании заявки необходимо ее вывести пользователю и получить согласие.
Добавь проверку наличия API ключа через переменные окружения или st.secrets, чтобы подключить OpenAI.

В существующее Streamlit приложение добавь на главный экран ввод email пользователя.
Пользователь должен ввести корректный email (валидация формата), иначе чат и форма заявки не показываются.
Сохрани email пользователя в st.session_state для дальнейшего использования.
После ввода email показывай чат-интерфейс для сбора заявки через OpenAI API.

Добавь на страницу элемент для загрузки изображения с поддержкой форматов png, jpg, jpeg.
После загрузки фото конвертируй его в base64 и загружай на ImgBB через их API.
Сохраняй URL загруженного фото в состоянии приложения и показывай пользователю подтверждение успешной загрузки.
Фото должно быть доступно для включения в состав заявки, которую формирует ассистент.

Добавь функцию, которая принимает данные сформированной заявки и сохраняет их в CSV файл локально.
В CSV должны быть колонки: ID заявки, email, тип оборудования, номер устройства, описание проблемы, дата инцидента, URL фото, дата отправки заявки.
При первую запись создавай новый файл с заголовками, дальше дописывай данные построчно.

Добавь функцию, которая принимает данные заявки и отправляет POST-запрос с JSON на внешний URL из переменной окружения `N8N_WEBHOOK_URL`.
Обрабатывай возможные ошибки (таймаут, ошибка подключения, статус ответа) и возвращай статус успеха или ошибки.
При успешной отправке показывай пользователю уведомление (внешний URL используется для отправки на почту).

