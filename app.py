import streamlit as st
import requests
import json
import re
from datetime import datetime
import os
from typing import Dict, List, Any, Optional

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(
    page_title="–ó–∞–ø—Ä–æ—Å –Ω–∞ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ",
    page_icon="üîß",
    layout="wide",
    initial_sidebar_state="collapsed"
)

# CSS –¥–ª—è –º–æ–±–∏–ª—å–Ω–æ–π –≤–µ—Ä—Å–∏–∏
st.markdown("""
<style>
    .main .block-container {
        padding-top: 1rem;
        padding-bottom: 1rem;
        max-width: 800px;
    }
    
    .chat-message {
        padding: 1rem;
        margin: 0.5rem 0;
        border-radius: 10px;
        max-width: 80%;
        word-wrap: break-word;
    }
    
    .user-message {
        background-color: #007bff;
        color: white;
        margin-left: auto;
        text-align: right;
    }
    
    .assistant-message {
        background-color: #f8f9fa;
        color: #333;
        border: 1px solid #dee2e6;
    }
    
    .chat-container {
        height: 400px;
        overflow-y: auto;
        border: 1px solid #dee2e6;
        border-radius: 10px;
        padding: 1rem;
        margin: 1rem 0;
    }
    
    .email-input {
        margin-bottom: 2rem;
    }
    
    .problem-data {
        background-color: #e9ecef;
        padding: 1rem;
        border-radius: 5px;
        margin: 1rem 0;
    }
    
    @media (max-width: 768px) {
        .main .block-container {
            padding: 0.5rem;
        }
        
        .chat-message {
            max-width: 90%;
        }
    }
</style>
""", unsafe_allow_html=True)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è session state
if 'email' not in st.session_state:
    st.session_state.email = None
if 'chat_history' not in st.session_state:
    st.session_state.chat_history = []
if 'problem_data' not in st.session_state:
    st.session_state.problem_data = {
        "equipment_type": "",
        "device_number": "",
        "description": "",
        "incident_date": "",
        "photo_url": ""
    }
if 'show_confirmation' not in st.session_state:
    st.session_state.show_confirmation = False
if 'final_request' not in st.session_state:
    st.session_state.final_request = None

def validate_email(email: str) -> bool:
    """–í–∞–ª–∏–¥–∞—Ü–∏—è email –∞–¥—Ä–µ—Å–∞"""
    pattern = r'^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$'
    return re.match(pattern, email) is not None

def send_to_n8n(message: str, chat_history: List[Dict], problem_data: Dict) -> Optional[Dict]:
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≤ n8n"""
    webhook_url = os.getenv('N8N_WEBHOOK_URL')
    
    if not webhook_url:
        st.error("N8N_WEBHOOK_URL –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
        return None
    
    payload = {
        "message": message,
        "chat_history": chat_history,
        "problem_data": problem_data
    }
    
    try:
        response = requests.post(
            webhook_url,
            json=payload,
            timeout=30,
            headers={'Content-Type': 'application/json'}
        )
        
        if response.status_code == 200:
            return response.json()
        else:
            st.error(f"–û—à–∏–±–∫–∞ n8n: {response.status_code}")
            return None
            
    except requests.exceptions.Timeout:
        st.error("–¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ n8n")
        return None
    except requests.exceptions.ConnectionError:
        st.error("–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ n8n")
        return None
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞: {str(e)}")
        return None

def is_problem_data_complete(problem_data: Dict) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª–Ω–æ—Ç—ã –¥–∞–Ω–Ω—ã—Ö –æ –ø—Ä–æ–±–ª–µ–º–µ"""
    required_fields = ["equipment_type", "device_number", "description", "incident_date"]
    return all(problem_data.get(field, "").strip() for field in required_fields)

def format_final_request(problem_data: Dict, email: str) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Ç–æ–≥–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞"""
    return f"""
**–ó–ê–ü–†–û–° –ù–ê –û–ë–°–õ–£–ñ–ò–í–ê–ù–ò–ï**

**Email:** {email}
**–¢–∏–ø –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è:** {problem_data.get('equipment_type', '–ù–µ —É–∫–∞–∑–∞–Ω')}
**–ù–æ–º–µ—Ä —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞:** {problem_data.get('device_number', '–ù–µ —É–∫–∞–∑–∞–Ω')}
**–û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã:** {problem_data.get('description', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}
**–î–∞—Ç–∞ –∏–Ω—Ü–∏–¥–µ–Ω—Ç–∞:** {problem_data.get('incident_date', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}
**–§–æ—Ç–æ:** {problem_data.get('photo_url', '–ù–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–æ')}

**–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏:** {datetime.now().strftime('%d.%m.%Y %H:%M')}
"""

def main():
    st.title("üîß –ó–∞–ø—Ä–æ—Å –Ω–∞ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ")
    
    # –í–≤–æ–¥ email
    if not st.session_state.email:
        st.markdown("### –í–≤–µ–¥–∏—Ç–µ –≤–∞—à email –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è")
        email = st.text_input("Email:", placeholder="example@company.com", key="email_input")
        
        if st.button("–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å"):
            if validate_email(email):
                st.session_state.email = email
                st.rerun()
            else:
                st.error("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email –∞–¥—Ä–µ—Å")
    
    else:
        st.success(f"–í—ã –≤–æ—à–ª–∏ –∫–∞–∫: {st.session_state.email}")
        
        # –ö–Ω–æ–ø–∫–∞ –≤—ã—Ö–æ–¥–∞
        if st.button("–í—ã–π—Ç–∏"):
            st.session_state.email = None
            st.session_state.chat_history = []
            st.session_state.problem_data = {
                "equipment_type": "",
                "device_number": "",
                "description": "",
                "incident_date": "",
                "photo_url": ""
            }
            st.session_state.show_confirmation = False
            st.session_state.final_request = None
            st.rerun()
        
        # –ß–∞—Ç –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
        st.markdown("### –ß–∞—Ç —Å –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–æ–º")
        
        # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞
        chat_container = st.container()
        with chat_container:
            if st.session_state.chat_history:
                for msg in st.session_state.chat_history:
                    if msg['is_user']:
                        st.markdown(f"""
                        <div class="chat-message user-message">
                            <strong>–í—ã:</strong> {msg['content']}
                        </div>
                        """, unsafe_allow_html=True)
                    else:
                        st.markdown(f"""
                        <div class="chat-message assistant-message">
                            <strong>–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç:</strong> {msg['content']}
                        </div>
                        """, unsafe_allow_html=True)
            else:
                # –ü–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
                if not st.session_state.chat_history:
                    initial_message = "–î–æ–±—Ä—ã–π –¥–µ–Ω—å! –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å? –†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ –ø—Ä–æ–±–ª–µ–º–µ —Å –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ–º."
                    st.session_state.chat_history.append({
                        "content": initial_message,
                        "is_user": False
                    })
                    st.markdown(f"""
                    <div class="chat-message assistant-message">
                        <strong>–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç:</strong> {initial_message}
                    </div>
                    """, unsafe_allow_html=True)
        
        # –í–≤–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏—è
        if not st.session_state.show_confirmation:
            user_input = st.text_input("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:", key="user_input", placeholder="–û–ø–∏—à–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º—É...")
            
            col1, col2 = st.columns([1, 4])
            with col1:
                if st.button("–û—Ç–ø—Ä–∞–≤–∏—Ç—å", type="primary"):
                    if user_input.strip():
                        # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∏—Å—Ç–æ—Ä–∏—é
                        st.session_state.chat_history.append({
                            "content": user_input,
                            "is_user": True
                        })
                        
                        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ n8n
                        with st.spinner("–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞..."):
                            response = send_to_n8n(
                                user_input,
                                st.session_state.chat_history,
                                st.session_state.problem_data
                            )
                        
                        if response:
                            # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø—Ä–æ–±–ª–µ–º–µ
                            if 'problem_data' in response:
                                st.session_state.problem_data.update(response['problem_data'])
                            
                            # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
                            if 'response' in response:
                                st.session_state.chat_history.append({
                                    "content": response['response'],
                                    "is_user": False
                                })
                        
                        st.rerun()
                    else:
                        st.warning("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")
        
        # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ–±—Ä–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        if any(st.session_state.problem_data.values()):
            st.markdown("### –°–æ–±—Ä–∞–Ω–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–±–ª–µ–º–µ")
            problem_data_display = st.session_state.problem_data.copy()
            
            for key, value in problem_data_display.items():
                if value:
                    field_names = {
                        "equipment_type": "–¢–∏–ø –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è",
                        "device_number": "–ù–æ–º–µ—Ä —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞",
                        "description": "–û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã",
                        "incident_date": "–î–∞—Ç–∞ –∏–Ω—Ü–∏–¥–µ–Ω—Ç–∞",
                        "photo_url": "–§–æ—Ç–æ"
                    }
                    st.write(f"**{field_names.get(key, key)}:** {value}")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∫ –æ—Ç–ø—Ä–∞–≤–∫–µ
        if is_problem_data_complete(st.session_state.problem_data) and not st.session_state.show_confirmation:
            st.success("‚úÖ –í—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–æ–±—Ä–∞–Ω—ã!")
            if st.button("–°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ", type="primary"):
                st.session_state.final_request = format_final_request(st.session_state.problem_data, st.session_state.email)
                st.session_state.show_confirmation = True
                st.rerun()
        
        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞
        if st.session_state.show_confirmation and st.session_state.final_request:
            st.markdown("### –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ")
            st.markdown(st.session_state.final_request)
            
            col1, col2 = st.columns(2)
            with col1:
                if st.button("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å", type="primary"):
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å
                    with st.spinner("–û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞..."):
                        response = send_to_n8n(
                            "done-request",
                            st.session_state.chat_history,
                            st.session_state.problem_data
                        )
                    
                    if response:
                        st.success("‚úÖ –ó–∞–ø—Ä–æ—Å –Ω–∞ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!")
                        
                        # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ
                        st.session_state.chat_history = []
                        st.session_state.problem_data = {
                            "equipment_type": "",
                            "device_number": "",
                            "description": "",
                            "incident_date": "",
                            "photo_url": ""
                        }
                        st.session_state.show_confirmation = False
                        st.session_state.final_request = None
                        st.rerun()
                    else:
                        st.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–ø—Ä–æ—Å–∞")
            
            with col2:
                if st.button("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å"):
                    st.session_state.show_confirmation = False
                    st.session_state.final_request = None
                    st.rerun()

if __name__ == "__main__":
    main()
