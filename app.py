import streamlit as st
import requests
import json
import re
from datetime import datetime
import os
from typing import List, Dict, Any

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(
    page_title="–ó–∞–ø—Ä–æ—Å –Ω–∞ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ",
    page_icon="üîß",
    layout="wide",
    initial_sidebar_state="collapsed"
)

# CSS –¥–ª—è –º–æ–±–∏–ª—å–Ω–æ–π –≤–µ—Ä—Å–∏–∏
st.markdown("""
<style>
    .chat-container {
        max-width: 100%;
        margin: 0 auto;
        padding: 10px;
    }
    
    .user-message {
        background-color: #007bff;
        color: white;
        padding: 10px;
        border-radius: 10px 10px 0 10px;
        margin: 5px 0;
        text-align: right;
        margin-left: 20%;
    }
    
    .assistant-message {
        background-color: #f1f3f4;
        color: black;
        padding: 10px;
        border-radius: 10px 10px 10px 0;
        margin: 5px 0;
        text-align: left;
        margin-right: 20%;
    }
    
    .message-input {
        position: fixed;
        bottom: 0;
        left: 0;
        right: 0;
        background: white;
        padding: 10px;
        border-top: 1px solid #ddd;
        z-index: 1000;
    }
    
    .chat-messages {
        margin-bottom: 80px;
        max-height: calc(100vh - 200px);
        overflow-y: auto;
    }
    
    @media (max-width: 768px) {
        .user-message {
            margin-left: 10%;
        }
        
        .assistant-message {
            margin-right: 10%;
        }
    }
</style>
""", unsafe_allow_html=True)

def validate_email(email: str) -> bool:
    """–í–∞–ª–∏–¥–∞—Ü–∏—è email –∞–¥—Ä–µ—Å–∞"""
    pattern = r'^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$'
    return re.match(pattern, email) is not None

def send_to_n8n(message: str, chat_history: List[Dict], problem_data: Dict) -> Dict[str, Any]:
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –≤ n8n"""
    webhook_url = os.getenv('N8N_WEBHOOK_URL')
    
    if not webhook_url:
        return {
            "success": False,
            "error": "N8N_WEBHOOK_URL –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω"
        }
    
    payload = {
        "message": message,
        "chat_history": chat_history,
        "problem_data": problem_data
    }
    
    try:
        response = requests.post(
            webhook_url,
            json=payload,
            timeout=30,
            headers={'Content-Type': 'application/json'}
        )
        
        if response.status_code == 200:
            return {
                "success": True,
                "data": response.json()
            }
        else:
            return {
                "success": False,
                "error": f"–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {response.status_code}"
            }
            
    except requests.exceptions.Timeout:
        return {
            "success": False,
            "error": "–¢–∞–π–º–∞—É—Ç –∑–∞–ø—Ä–æ—Å–∞"
        }
    except requests.exceptions.ConnectionError:
        return {
            "success": False,
            "error": "–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è"
        }
    except Exception as e:
        return {
            "success": False,
            "error": f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {str(e)}"
        }

def display_chat_message(content: str, is_user: bool):
    """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç–µ"""
    if is_user:
        st.markdown(f'<div class="user-message">{content}</div>', unsafe_allow_html=True)
    else:
        st.markdown(f'<div class="assistant-message">{content}</div>', unsafe_allow_html=True)

def initialize_session_state():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Å—Å–∏–∏"""
    if 'email' not in st.session_state:
        st.session_state.email = ""
    if 'chat_history' not in st.session_state:
        st.session_state.chat_history = []
    if 'problem_data' not in st.session_state:
        st.session_state.problem_data = {
            "equipment_type": "",
            "device_number": "",
            "description": "",
            "incident_date": "",
            "photo_url": ""
        }
    if 'show_final_form' not in st.session_state:
        st.session_state.show_final_form = False

def main():
    initialize_session_state()
    
    st.title("üîß –ó–∞–ø—Ä–æ—Å –Ω–∞ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ email
    if not st.session_state.email:
        st.markdown("### –í–≤–µ–¥–∏—Ç–µ –≤–∞—à email –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è")
        email = st.text_input("Email:", placeholder="example@company.com")
        
        if st.button("–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å"):
            if validate_email(email):
                st.session_state.email = email
                st.success("Email —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω!")
                st.rerun()
            else:
                st.error("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email –∞–¥—Ä–µ—Å")
    else:
        # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ email –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        st.markdown(f"**–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:** {st.session_state.email}")
        
        # –ß–∞—Ç –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
        st.markdown("### –ß–∞—Ç —Å –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–æ–º")
        
        # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞
        chat_container = st.container()
        with chat_container:
            st.markdown('<div class="chat-messages">', unsafe_allow_html=True)
            
            if not st.session_state.chat_history:
                # –ü–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
                display_chat_message("–î–æ–±—Ä—ã–π –¥–µ–Ω—å, —á–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?", False)
                st.session_state.chat_history.append({
                    "content": "–î–æ–±—Ä—ã–π –¥–µ–Ω—å, —á–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?",
                    "is_user": False
                })
            else:
                for msg in st.session_state.chat_history:
                    display_chat_message(msg["content"], msg["is_user"])
            
            st.markdown('</div>', unsafe_allow_html=True)
        
        # –í–≤–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏—è
        with st.form("chat_form", clear_on_submit=True):
            user_message = st.text_input("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:", placeholder="–û–ø–∏—à–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º—É...")
            submit_button = st.form_submit_button("–û—Ç–ø—Ä–∞–≤–∏—Ç—å")
            
            if submit_button and user_message.strip():
                # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∏—Å—Ç–æ—Ä–∏—é
                st.session_state.chat_history.append({
                    "content": user_message,
                    "is_user": True
                })
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –≤ n8n
                with st.spinner("–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞..."):
                    result = send_to_n8n(
                        user_message,
                        st.session_state.chat_history,
                        st.session_state.problem_data
                    )
                
                if result["success"]:
                    response_data = result["data"]
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø—Ä–æ–±–ª–µ–º–µ
                    if "problem_data" in response_data:
                        st.session_state.problem_data.update(response_data["problem_data"])
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ –≤ –∏—Å—Ç–æ—Ä–∏—é
                    assistant_response = response_data.get("response", "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")
                    st.session_state.chat_history.append({
                        "content": assistant_response,
                        "is_user": False
                    })
                    
                    st.success("–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!")
                    st.rerun()
                else:
                    st.error(f"–û—à–∏–±–∫–∞: {result['error']}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–±—Ä–∞–Ω—ã –ª–∏ –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ
        required_fields = ["equipment_type", "device_number", "description", "incident_date"]
        missing_fields = [field for field in required_fields if not st.session_state.problem_data.get(field)]
        
        if not missing_fields and not st.session_state.show_final_form:
            st.markdown("---")
            st.markdown("### –í—Å–µ –¥–∞–Ω–Ω—ã–µ —Å–æ–±—Ä–∞–Ω—ã!")
            
            if st.button("–°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ"):
                st.session_state.show_final_form = True
                st.rerun()
        
        # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏—Ç–æ–≥–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
        if st.session_state.show_final_form:
            st.markdown("---")
            st.markdown("### –ò—Ç–æ–≥–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ")
            
            col1, col2 = st.columns(2)
            
            with col1:
                st.markdown(f"**Email:** {st.session_state.email}")
                st.markdown(f"**–¢–∏–ø –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è:** {st.session_state.problem_data['equipment_type']}")
                st.markdown(f"**–ù–æ–º–µ—Ä —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞:** {st.session_state.problem_data['device_number']}")
            
            with col2:
                st.markdown(f"**–î–∞—Ç–∞ –∏–Ω—Ü–∏–¥–µ–Ω—Ç–∞:** {st.session_state.problem_data['incident_date']}")
                if st.session_state.problem_data['photo_url']:
                    st.markdown(f"**–§–æ—Ç–æ:** {st.session_state.problem_data['photo_url']}")
            
            st.markdown(f"**–û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã:** {st.session_state.problem_data['description']}")
            
            st.markdown("---")
            
            col1, col2, col3 = st.columns(3)
            
            with col1:
                if st.button("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å"):
                    # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
                    st.success("–ó–∞–ø—Ä–æ—Å –Ω–∞ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!")
                    st.balloons()
            
            with col2:
                if st.button("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å"):
                    st.session_state.show_final_form = False
                    st.rerun()
            
            with col3:
                if st.button("üîÑ –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ"):
                    st.session_state.chat_history = []
                    st.session_state.problem_data = {
                        "equipment_type": "",
                        "device_number": "",
                        "description": "",
                        "incident_date": "",
                        "photo_url": ""
                    }
                    st.session_state.show_final_form = False
                    st.rerun()

if __name__ == "__main__":
    main()
