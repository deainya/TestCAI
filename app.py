import streamlit as st
import requests
import json
import re
from datetime import datetime
import os

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(
    page_title="–ó–∞–ø—Ä–æ—Å –Ω–∞ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ",
    page_icon="üîß",
    layout="wide",
    initial_sidebar_state="collapsed"
)

# CSS –¥–ª—è –º–æ–±–∏–ª—å–Ω–æ–π –≤–µ—Ä—Å–∏–∏
st.markdown("""
<style>
    .chat-container {
        max-width: 100%;
        margin: 0 auto;
        padding: 10px;
    }
    
    .user-message {
        background-color: #007bff;
        color: white;
        padding: 10px;
        border-radius: 10px 10px 0 10px;
        margin: 5px 0;
        text-align: right;
        max-width: 80%;
        margin-left: auto;
    }
    
    .assistant-message {
        background-color: #f1f3f4;
        color: black;
        padding: 10px;
        border-radius: 10px 10px 10px 0;
        margin: 5px 0;
        max-width: 80%;
    }
    
    .chat-input {
        position: fixed;
        bottom: 0;
        left: 0;
        right: 0;
        background: white;
        padding: 10px;
        border-top: 1px solid #ddd;
        z-index: 1000;
    }
    
    @media (max-width: 768px) {
        .main .block-container {
            padding: 1rem;
        }
    }
</style>
""", unsafe_allow_html=True)

def validate_email(email):
    """–í–∞–ª–∏–¥–∞—Ü–∏—è email –∞–¥—Ä–µ—Å–∞"""
    pattern = r'^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$'
    return re.match(pattern, email) is not None

def send_to_n8n(message, chat_history, problem_data):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –≤ n8n"""
    webhook_url = os.getenv('N8N_WEBHOOK_URL')
    
    if not webhook_url:
        return {"error": "N8N_WEBHOOK_URL –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω"}
    
    payload = {
        "message": message,
        "chat_history": chat_history,
        "problem_data": problem_data
    }
    
    try:
        response = requests.post(
            webhook_url,
            json=payload,
            timeout=30,
            headers={'Content-Type': 'application/json'}
        )
        
        if response.status_code == 200:
            response_data = response.json()
            
            # –ü–∞—Ä—Å–∏–Ω–≥ –æ—Ç–≤–µ—Ç–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
            if isinstance(response_data, list) and len(response_data) > 0:
                # –ï—Å–ª–∏ –æ—Ç–≤–µ—Ç - –º–∞—Å—Å–∏–≤ (–∫–∞–∫ –≤ –ø—Ä–∏–º–µ—Ä–µ)
                first_item = response_data[0]
                if 'message' in first_item and 'content' in first_item['message']:
                    content = first_item['message']['content']
                    return {
                        "response": content.get("response", "–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç."),
                        "problem_data": content.get("problem_data", {})
                    }
                else:
                    return {"error": "–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞ –æ—Ç n8n"}
            elif isinstance(response_data, dict):
                # –ï—Å–ª–∏ –æ—Ç–≤–µ—Ç - –æ–±—ä–µ–∫—Ç
                return {
                    # "response": response_data.get("response", "–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç."),
                    "response": json.dumps(response_data, ensure_ascii=False, indent=2)
                    "problem_data": response_data.get("problem_data", {})
                }
            else:
                return {"error": "–ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ –æ—Ç n8n"}
        else:
            return {"error": f"–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {response.status_code}"}
            
    except requests.exceptions.Timeout:
        return {"error": "–¢–∞–π–º–∞—É—Ç –∑–∞–ø—Ä–æ—Å–∞"}
    except requests.exceptions.ConnectionError:
        return {"error": "–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è"}
    except Exception as e:
        return {"error": f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {str(e)}"}

def initialize_session_state():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Å—Å–∏–∏"""
    if 'email' not in st.session_state:
        st.session_state.email = None
    if 'chat_history' not in st.session_state:
        st.session_state.chat_history = []
    if 'problem_data' not in st.session_state:
        st.session_state.problem_data = {
            "equipment_type": "",
            "device_number": "",
            "description": "",
            "incident_date": "",
            "photo_url": ""
        }
    if 'show_final_form' not in st.session_state:
        st.session_state.show_final_form = False

def display_chat():
    """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —á–∞—Ç–∞"""
    st.markdown('<div class="chat-container">', unsafe_allow_html=True)
    
    for message in st.session_state.chat_history:
        if message['is_user']:
            st.markdown(f'<div class="user-message">{message["content"]}</div>', unsafe_allow_html=True)
        else:
            st.markdown(f'<div class="assistant-message">{message["content"]}</div>', unsafe_allow_html=True)
    
    st.markdown('</div>', unsafe_allow_html=True)

def display_final_form():
    """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏—Ç–æ–≥–æ–≤–æ–π —Ñ–æ—Ä–º—ã"""
    st.subheader("üìã –ò—Ç–æ–≥–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ")
    
    with st.form("final_request"):
        st.write("**–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π:**")
        
        col1, col2 = st.columns(2)
        
        with col1:
            equipment_type = st.text_input(
                "–¢–∏–ø –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è",
                value=st.session_state.problem_data.get("equipment_type", ""),
                disabled=True
            )
            device_number = st.text_input(
                "–ù–æ–º–µ—Ä —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞",
                value=st.session_state.problem_data.get("device_number", ""),
                disabled=True
            )
        
        with col2:
            incident_date = st.text_input(
                "–î–∞—Ç–∞ –∏–Ω—Ü–∏–¥–µ–Ω—Ç–∞",
                value=st.session_state.problem_data.get("incident_date", ""),
                disabled=True
            )
            photo_url = st.text_input(
                "URL —Ñ–æ—Ç–æ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)",
                value=st.session_state.problem_data.get("photo_url", ""),
                disabled=True
            )
        
        description = st.text_area(
            "–û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã",
            value=st.session_state.problem_data.get("description", ""),
            disabled=True,
            height=100
        )
        
        submitted = st.form_submit_button("‚úÖ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å", type="primary")
        
        if submitted:
            # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏—Ç–æ–≥–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
            st.success("‚úÖ –ó–∞–ø—Ä–æ—Å –Ω–∞ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!")
            st.balloons()
            
            # –û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏
            st.session_state.chat_history = []
            st.session_state.problem_data = {
                "equipment_type": "",
                "device_number": "",
                "description": "",
                "incident_date": "",
                "photo_url": ""
            }
            st.session_state.show_final_form = False
            st.rerun()

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    initialize_session_state()
    
    st.title("üîß –ó–∞–ø—Ä–æ—Å –Ω–∞ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ")
    st.markdown("---")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ email
    if not st.session_state.email:
        st.subheader("üìß –í–≤–µ–¥–∏—Ç–µ –≤–∞—à email")
        email = st.text_input("Email", placeholder="example@company.com")
        
        if st.button("–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å", type="primary"):
            if validate_email(email):
                st.session_state.email = email
                st.success("‚úÖ Email –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω!")
                st.rerun()
            else:
                st.error("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email –∞–¥—Ä–µ—Å")
    else:
        # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ email –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        st.info(f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {st.session_state.email}")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∏—Ç–æ–≥–æ–≤–æ–π —Ñ–æ—Ä–º—ã
        required_fields = ["equipment_type", "device_number", "description", "incident_date"]
        all_required_filled = all(st.session_state.problem_data.get(field) for field in required_fields)
        
        if all_required_filled and not st.session_state.show_final_form:
            if st.button("üìã –ü–æ–∫–∞–∑–∞—Ç—å –∏—Ç–æ–≥–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å", type="primary"):
                st.session_state.show_final_form = True
                st.rerun()
        
        if st.session_state.show_final_form:
            display_final_form()
        else:
            # –ß–∞—Ç –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
            st.subheader("üí¨ –ß–∞—Ç —Å –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–æ–º")
            display_chat()
            
            # –í–≤–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏—è
            with st.form("chat_form", clear_on_submit=True):
                user_message = st.text_input("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:", placeholder="–û–ø–∏—à–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º—É...")
                submitted = st.form_submit_button("–û—Ç–ø—Ä–∞–≤–∏—Ç—å", type="primary")
                
                if submitted and user_message:
                    # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∏—Å—Ç–æ—Ä–∏—é
                    st.session_state.chat_history.append({
                        "content": user_message,
                        "is_user": True
                    })
                    
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –≤ n8n
                    with st.spinner("–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç –ø–µ—á–∞—Ç–∞–µ—Ç..."):
                        response = send_to_n8n(
                            user_message,
                            st.session_state.chat_history,
                            st.session_state.problem_data
                        )
                    
                    if "error" in response:
                        st.error(f"‚ùå {response['error']}")
                        # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
                        st.session_state.chat_history.append({
                            "content": f"–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {response['error']}",
                            "is_user": False
                        })
                    else:
                        # –î–æ–±–∞–≤–ª—è–µ–º –≤–µ—Å—å JSON –æ—Ç–≤–µ—Ç –æ—Ç n8n
                        assistant_response = json.dumps(response, ensure_ascii=False, indent=2)
                        st.session_state.chat_history.append({
                            "content": assistant_response,
                            "is_user": False
                        })
                        
                        # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø—Ä–æ–±–ª–µ–º–µ
                        if "problem_data" in response:
                            st.session_state.problem_data.update(response["problem_data"])
                            print(f"–û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ problem_data: {st.session_state.problem_data}")
                    
                    st.rerun()
        
        # –ö–Ω–æ–ø–∫–∞ —Å–±—Ä–æ—Å–∞
        if st.button("üîÑ –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ"):
            st.session_state.email = None
            st.session_state.chat_history = []
            st.session_state.problem_data = {
                "equipment_type": "",
                "device_number": "",
                "description": "",
                "incident_date": "",
                "photo_url": ""
            }
            st.session_state.show_final_form = False
            st.rerun()

if __name__ == "__main__":
    main()
