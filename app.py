import streamlit as st
import requests
import json
import re
from datetime import datetime
import time
from typing import Dict, List, Optional

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(
    page_title="–ó–∞–ø—Ä–æ—Å –Ω–∞ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ",
    page_icon="üîß",
    layout="wide",
    initial_sidebar_state="collapsed"
)

# CSS –¥–ª—è –º–æ–±–∏–ª—å–Ω–æ–π –≤–µ—Ä—Å–∏–∏
st.markdown("""
<style>
    .chat-container {
        max-width: 100%;
        margin: 0 auto;
        padding: 10px;
    }
    
    .chat-message {
        padding: 10px;
        margin: 5px 0;
        border-radius: 10px;
        max-width: 80%;
        word-wrap: break-word;
    }
    
    .user-message {
        background-color: #007bff;
        color: white;
        margin-left: auto;
        text-align: right;
    }
    
    .assistant-message {
        background-color: #f1f3f4;
        color: black;
        margin-right: auto;
    }
    
    .email-input {
        max-width: 400px;
        margin: 0 auto;
    }
    
    @media (max-width: 768px) {
        .chat-container {
            padding: 5px;
        }
        
        .chat-message {
            max-width: 90%;
            font-size: 14px;
        }
    }
</style>
""", unsafe_allow_html=True)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è session state
if 'email' not in st.session_state:
    st.session_state.email = None
if 'chat_history' not in st.session_state:
    st.session_state.chat_history = []
if 'ticket_data' not in st.session_state:
    st.session_state.ticket_data = {
        'equipment_type': None,
        'device_number': None,
        'problem_description': None,
        'incident_date': None,
        'photo_url': None
    }
if 'chat_started' not in st.session_state:
    st.session_state.chat_started = False

def validate_email(email: str) -> bool:
    """–í–∞–ª–∏–¥–∞—Ü–∏—è email –∞–¥—Ä–µ—Å–∞"""
    pattern = r'^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$'
    return re.match(pattern, email) is not None

def send_to_n8n(message: str, chat_history: List[Dict]) -> Dict:
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ n8n webhook"""
    n8n_url = st.secrets.get("N8N_WEBHOOK_URL")
    
    if not n8n_url:
        return {"error": "N8N_WEBHOOK_URL –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω"}
    
    try:
        payload = {
            "message": message,
            "chat_history": chat_history,
            "ticket_data": st.session_state.ticket_data,
            "user_email": st.session_state.email
        }
        
        response = requests.post(
            n8n_url,
            json=payload,
            timeout=30,
            headers={'Content-Type': 'application/json'}
        )
        
        if response.status_code == 200:
            return response.json()
        else:
            return {"error": f"–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {response.status_code}"}
            
    except requests.exceptions.Timeout:
        return {"error": "–¢–∞–π–º–∞—É—Ç –∑–∞–ø—Ä–æ—Å–∞ –∫ n8n"}
    except requests.exceptions.ConnectionError:
        return {"error": "–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ n8n"}
    except Exception as e:
        return {"error": f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {str(e)}"}

def display_chat_message(message: str, is_user: bool):
    """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç–µ"""
    css_class = "user-message" if is_user else "assistant-message"
    st.markdown(f'<div class="chat-message {css_class}">{message}</div>', unsafe_allow_html=True)

def is_ticket_complete() -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª–Ω–æ—Ç—ã –¥–∞–Ω–Ω—ã—Ö –∑–∞—è–≤–∫–∏"""
    required_fields = ['equipment_type', 'device_number', 'problem_description', 'incident_date']
    return all(st.session_state.ticket_data[field] for field in required_fields)

def display_ticket_summary():
    """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–≤–æ–¥–∫–∏ –∑–∞—è–≤–∫–∏"""
    st.markdown("### üìã –°–≤–æ–¥–∫–∞ –∑–∞—è–≤–∫–∏ –Ω–∞ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ")
    
    col1, col2 = st.columns(2)
    
    with col1:
        st.write(f"**Email:** {st.session_state.email}")
        st.write(f"**–¢–∏–ø –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è:** {st.session_state.ticket_data['equipment_type']}")
        st.write(f"**–ù–æ–º–µ—Ä —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞:** {st.session_state.ticket_data['device_number']}")
    
    with col2:
        st.write(f"**–î–∞—Ç–∞ –∏–Ω—Ü–∏–¥–µ–Ω—Ç–∞:** {st.session_state.ticket_data['incident_date']}")
        if st.session_state.ticket_data['photo_url']:
            st.write(f"**–§–æ—Ç–æ:** {st.session_state.ticket_data['photo_url']}")
    
    st.write(f"**–û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã:** {st.session_state.ticket_data['problem_description']}")

def main():
    st.title("üîß –ó–∞–ø—Ä–æ—Å –Ω–∞ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ email
    if not st.session_state.email:
        st.markdown('<div class="email-input">', unsafe_allow_html=True)
        st.markdown("### –í–≤–µ–¥–∏—Ç–µ –≤–∞—à email –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è")
        email = st.text_input("Email:", placeholder="example@company.com")
        
        if st.button("–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å", type="primary"):
            if email and validate_email(email):
                st.session_state.email = email
                st.rerun()
            else:
                st.error("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email –∞–¥—Ä–µ—Å")
        st.markdown('</div>', unsafe_allow_html=True)
        
    else:
        # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ email –∏ –∫–Ω–æ–ø–∫–∞ —Å–±—Ä–æ—Å–∞
        col1, col2 = st.columns([3, 1])
        with col1:
            st.success(f"–í—ã –≤–æ—à–ª–∏ –∫–∞–∫: {st.session_state.email}")
        with col2:
            if st.button("–°–º–µ–Ω–∏—Ç—å email"):
                st.session_state.email = None
                st.session_state.chat_history = []
                st.session_state.ticket_data = {
                    'equipment_type': None,
                    'device_number': None,
                    'problem_description': None,
                    'incident_date': None,
                    'photo_url': None
                }
                st.session_state.chat_started = False
                st.rerun()
        
        # –ß–∞—Ç –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
        st.markdown('<div class="chat-container">', unsafe_allow_html=True)
        
        # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞
        for message in st.session_state.chat_history:
            display_chat_message(message['content'], message['is_user'])
        
        # –ù–∞—á–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
        if not st.session_state.chat_started:
            initial_message = "–î–æ–±—Ä—ã–π –¥–µ–Ω—å, —á–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?"
            display_chat_message(initial_message, False)
            st.session_state.chat_history.append({
                'content': initial_message,
                'is_user': False,
                'timestamp': datetime.now()
            })
            st.session_state.chat_started = True
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª–Ω–æ—Ç—ã –¥–∞–Ω–Ω—ã—Ö
        if is_ticket_complete():
            st.markdown("---")
            display_ticket_summary()
            
            if st.button("üì§ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É", type="primary"):
                with st.spinner("–û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞—è–≤–∫–∏..."):
                    # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞—è–≤–∫–∏
                    st.success("‚úÖ –ó–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!")
                    st.balloons()
        else:
            # –í–≤–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏—è
            user_input = st.text_input("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:", key="user_input", placeholder="–û–ø–∏—à–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º—É...")
            
            col1, col2 = st.columns([1, 4])
            with col1:
                if st.button("–û—Ç–ø—Ä–∞–≤–∏—Ç—å", type="primary"):
                    if user_input:
                        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∏—Å—Ç–æ—Ä–∏—é
                        st.session_state.chat_history.append({
                            'content': user_input,
                            'is_user': True,
                            'timestamp': datetime.now()
                        })
                        
                        # –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ n8n
                        with st.spinner("–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞..."):
                            response = send_to_n8n(user_input, st.session_state.chat_history)
                            
                            if "error" in response:
                                st.error(f"–û—à–∏–±–∫–∞: {response['error']}")
                            else:
                                # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
                                assistant_response = response.get('response', '–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏.')
                                st.session_state.chat_history.append({
                                    'content': assistant_response,
                                    'is_user': False,
                                    'timestamp': datetime.now()
                                })
                                
                                # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∑–∞—è–≤–∫–∏ –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å –≤ –æ—Ç–≤–µ—Ç–µ
                                if 'ticket_data' in response:
                                    st.session_state.ticket_data.update(response['ticket_data'])
                        
                        st.rerun()
            
            with col2:
                if st.button("üì∑ –î–æ–±–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ"):
                    photo_url = st.text_input("URL —Ñ–æ—Ç–æ:", placeholder="https://example.com/photo.jpg")
                    if photo_url:
                        st.session_state.ticket_data['photo_url'] = photo_url
                        st.success("–§–æ—Ç–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ!")
                        st.rerun()
        
        st.markdown('</div>', unsafe_allow_html=True)

if __name__ == "__main__":
    main()
