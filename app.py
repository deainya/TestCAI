import streamlit as st
import requests
import json
import re
from datetime import datetime
import os
from typing import Dict, List, Optional

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(
    page_title="–ó–∞–ø—Ä–æ—Å –Ω–∞ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ",
    page_icon="üîß",
    layout="wide",
    initial_sidebar_state="collapsed"
)

# CSS –¥–ª—è –º–æ–±–∏–ª—å–Ω–æ–π –≤–µ—Ä—Å–∏–∏
st.markdown("""
<style>
    .main .block-container {
        padding-top: 1rem;
        padding-bottom: 1rem;
        max-width: 100%;
    }
    
    .chat-message {
        padding: 1rem;
        margin: 0.5rem 0;
        border-radius: 10px;
        max-width: 80%;
    }
    
    .user-message {
        background-color: #007bff;
        color: white;
        margin-left: auto;
        text-align: right;
    }
    
    .assistant-message {
        background-color: #f1f3f4;
        color: black;
        margin-right: auto;
    }
    
    .chat-container {
        height: 400px;
        overflow-y: auto;
        border: 1px solid #ddd;
        border-radius: 10px;
        padding: 1rem;
        margin-bottom: 1rem;
    }
    
    .email-input {
        margin-bottom: 2rem;
    }
    
    .problem-summary {
        background-color: #e8f4fd;
        padding: 1rem;
        border-radius: 10px;
        margin: 1rem 0;
    }
    
    @media (max-width: 768px) {
        .main .block-container {
            padding: 0.5rem;
        }
        
        .chat-message {
            max-width: 90%;
        }
    }
</style>
""", unsafe_allow_html=True)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è session state
if 'email' not in st.session_state:
    st.session_state.email = None
if 'chat_history' not in st.session_state:
    st.session_state.chat_history = []
if 'problem_data' not in st.session_state:
    st.session_state.problem_data = {
        'equipment_type': '',
        'device_number': '',
        'description': '',
        'incident_date': '',
        'photo_url': ''
    }
if 'show_chat' not in st.session_state:
    st.session_state.show_chat = False

def validate_email(email: str) -> bool:
    """–í–∞–ª–∏–¥–∞—Ü–∏—è email –∞–¥—Ä–µ—Å–∞"""
    pattern = r'^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$'
    return re.match(pattern, email) is not None

def send_to_n8n(message: str, chat_history: List[Dict], problem_data: Dict) -> Dict:
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –≤ n8n"""
    webhook_url = os.getenv('N8N_WEBHOOK_URL')
    
    if not webhook_url:
        return {
            'success': False,
            'error': 'N8N_WEBHOOK_URL –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω'
        }
    
    payload = {
        'message': message,
        'chat_history': chat_history,
        'problem_data': problem_data
    }
    
    try:
        response = requests.post(
            webhook_url,
            json=payload,
            timeout=30,
            headers={'Content-Type': 'application/json'}
        )
        
        if response.status_code == 200:
            return {
                'success': True,
                'data': response.json()
            }
        else:
            return {
                'success': False,
                'error': f'–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {response.status_code}'
            }
            
    except requests.exceptions.Timeout:
        return {
            'success': False,
            'error': '–¢–∞–π–º–∞—É—Ç –∑–∞–ø—Ä–æ—Å–∞'
        }
    except requests.exceptions.ConnectionError:
        return {
            'success': False,
            'error': '–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è'
        }
    except Exception as e:
        return {
            'success': False,
            'error': f'–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {str(e)}'
        }

def display_chat_message(content: str, is_user: bool):
    """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç–µ"""
    message_class = "user-message" if is_user else "assistant-message"
    st.markdown(f'<div class="chat-message {message_class}">{content}</div>', unsafe_allow_html=True)

def display_problem_summary():
    """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–≤–æ–¥–∫–∏ –ø–æ –ø—Ä–æ–±–ª–µ–º–µ"""
    data = st.session_state.problem_data
    
    st.markdown("### üìã –°–≤–æ–¥–∫–∞ –ø–æ –ø—Ä–æ–±–ª–µ–º–µ")
    st.markdown('<div class="problem-summary">', unsafe_allow_html=True)
    
    if data['equipment_type']:
        st.write(f"**–¢–∏–ø –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è:** {data['equipment_type']}")
    if data['device_number']:
        st.write(f"**–ù–æ–º–µ—Ä —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞:** {data['device_number']}")
    if data['description']:
        st.write(f"**–û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã:** {data['description']}")
    if data['incident_date']:
        st.write(f"**–î–∞—Ç–∞ –∏–Ω—Ü–∏–¥–µ–Ω—Ç–∞:** {data['incident_date']}")
    if data['photo_url']:
        st.write(f"**–§–æ—Ç–æ:** {data['photo_url']}")
    
    st.markdown('</div>', unsafe_allow_html=True)

def main():
    st.title("üîß –ó–∞–ø—Ä–æ—Å –Ω–∞ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ")
    
    # –í–≤–æ–¥ email
    st.markdown('<div class="email-input">', unsafe_allow_html=True)
    email = st.text_input(
        "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à email:",
        value=st.session_state.email or "",
        placeholder="example@company.com",
        help="–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è"
    )
    st.markdown('</div>', unsafe_allow_html=True)
    
    # –í–∞–ª–∏–¥–∞—Ü–∏—è email
    if email:
        if validate_email(email):
            st.session_state.email = email
            st.session_state.show_chat = True
            st.success("‚úÖ Email –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π")
        else:
            st.error("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç email")
            st.session_state.show_chat = False
    
    # –ü–æ–∫–∞–∑ —á–∞—Ç–∞ —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ email
    if st.session_state.show_chat and st.session_state.email:
        
        # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–≤–æ–¥–∫–∏ –ø–æ –ø—Ä–æ–±–ª–µ–º–µ
        display_problem_summary()
        
        # –ß–∞—Ç –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
        st.markdown("### üí¨ –ß–∞—Ç —Å –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–æ–º")
        
        # –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è —á–∞—Ç–∞
        chat_container = st.container()
        
        with chat_container:
            st.markdown('<div class="chat-container">', unsafe_allow_html=True)
            
            # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞
            for message in st.session_state.chat_history:
                display_chat_message(message['content'], message['is_user'])
            
            st.markdown('</div>', unsafe_allow_html=True)
        
        # –í–≤–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏—è
        user_input = st.text_input(
            "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:",
            placeholder="–û–ø–∏—à–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º—É...",
            key="user_input"
        )
        
        col1, col2 = st.columns([1, 4])
        
        with col1:
            send_button = st.button("–û—Ç–ø—Ä–∞–≤–∏—Ç—å", type="primary")
        
        with col2:
            if st.button("–û—á–∏—Å—Ç–∏—Ç—å —á–∞—Ç"):
                st.session_state.chat_history = []
                st.session_state.problem_data = {
                    'equipment_type': '',
                    'device_number': '',
                    'description': '',
                    'incident_date': '',
                    'photo_url': ''
                }
                st.rerun()
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
        if send_button and user_input.strip():
            # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∏—Å—Ç–æ—Ä–∏—é
            st.session_state.chat_history.append({
                'content': user_input,
                'is_user': True
            })
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –≤ n8n
            with st.spinner("–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞..."):
                result = send_to_n8n(
                    user_input,
                    st.session_state.chat_history[:-1],  # –ò—Å—Ç–æ—Ä–∏—è –±–µ–∑ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
                    st.session_state.problem_data
                )
            
            if result['success']:
                # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
                response_data = result['data']
                assistant_response = response_data.get('response', '–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏.')
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø—Ä–æ–±–ª–µ–º–µ
                if 'problem_data' in response_data:
                    st.session_state.problem_data.update(response_data['problem_data'])
                
                # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ –≤ –∏—Å—Ç–æ—Ä–∏—é
                st.session_state.chat_history.append({
                    'content': assistant_response,
                    'is_user': False
                })
                
                st.success("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
                st.rerun()
            else:
                st.error(f"‚ùå –û—à–∏–±–∫–∞: {result['error']}")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ
        data = st.session_state.problem_data
        required_fields = ['equipment_type', 'device_number', 'description', 'incident_date']
        all_required_filled = all(data[field] for field in required_fields)
        
        if all_required_filled:
            st.markdown("---")
            st.markdown("### üìù –ò—Ç–æ–≥–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ")
            
            # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏—Ç–æ–≥–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
            st.markdown("**–î–∞–Ω–Ω—ã–µ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ:**")
            st.write(f"**Email:** {st.session_state.email}")
            st.write(f"**–¢–∏–ø –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è:** {data['equipment_type']}")
            st.write(f"**–ù–æ–º–µ—Ä —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞:** {data['device_number']}")
            st.write(f"**–û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã:** {data['description']}")
            st.write(f"**–î–∞—Ç–∞ –∏–Ω—Ü–∏–¥–µ–Ω—Ç–∞:** {data['incident_date']}")
            if data['photo_url']:
                st.write(f"**–§–æ—Ç–æ:** {data['photo_url']}")
            
            # –ö–Ω–æ–ø–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
            if st.button("‚úÖ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ", type="primary"):
                st.success("üéâ –ó–∞–ø—Ä–æ—Å –Ω–∞ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!")
                st.balloons()
                
                # –û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏
                st.session_state.chat_history = []
                st.session_state.problem_data = {
                    'equipment_type': '',
                    'device_number': '',
                    'description': '',
                    'incident_date': '',
                    'photo_url': ''
                }
                st.rerun()
        else:
            missing_fields = [field for field in required_fields if not data[field]]
            st.info(f"‚ÑπÔ∏è –î–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞–ø–æ–ª–Ω–∏—Ç—å: {', '.join(missing_fields)}")

if __name__ == "__main__":
    main()
