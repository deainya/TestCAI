import streamlit as st
import requests
import json
import re
from datetime import datetime
import time

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –¥–ª—è –º–æ–±–∏–ª—å–Ω–æ–π –≤–µ—Ä—Å–∏–∏
st.set_page_config(
    page_title="–ó–∞–ø—Ä–æ—Å –Ω–∞ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ",
    page_icon="üîß",
    layout="wide",
    initial_sidebar_state="collapsed"
)

# CSS –¥–ª—è –º–æ–±–∏–ª—å–Ω–æ–π –≤–µ—Ä—Å–∏–∏
st.markdown("""
<style>
    .main > div {
        padding-top: 2rem;
    }
    
    .stTextInput > div > div > input {
        font-size: 16px;
    }
    
    .chat-message {
        padding: 1rem;
        margin: 0.5rem 0;
        border-radius: 10px;
        max-width: 80%;
    }
    
    .user-message {
        background-color: #007bff;
        color: white;
        margin-left: auto;
        text-align: right;
    }
    
    .assistant-message {
        background-color: #f8f9fa;
        color: #333;
        margin-right: auto;
    }
    
    .error-message {
        background-color: #dc3545;
        color: white;
        padding: 1rem;
        border-radius: 5px;
        margin: 1rem 0;
    }
    
    .success-message {
        background-color: #28a745;
        color: white;
        padding: 1rem;
        border-radius: 5px;
        margin: 1rem 0;
    }
    
    @media (max-width: 768px) {
        .main > div {
            padding: 1rem;
        }
    }
</style>
""", unsafe_allow_html=True)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è session state
if 'email' not in st.session_state:
    st.session_state.email = None
if 'chat_history' not in st.session_state:
    st.session_state.chat_history = []
if 'problem_data' not in st.session_state:
    st.session_state.problem_data = {
        'equipment_type': None,
        'device_number': None,
        'description': None,
        'incident_date': None,
        'photo_url': None
    }
if 'final_request' not in st.session_state:
    st.session_state.final_request = None

def validate_email(email):
    """–í–∞–ª–∏–¥–∞—Ü–∏—è email –∞–¥—Ä–µ—Å–∞"""
    pattern = r'^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$'
    return re.match(pattern, email) is not None

def send_to_n8n(message, chat_history):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ n8n –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ LLM"""
    try:
        webhook_url = st.secrets.get("N8N_WEBHOOK_URL")
        if not webhook_url:
            return {"error": "N8N_WEBHOOK_URL –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω"}
        
        payload = {
            "message": message,
            "chat_history": chat_history,
            "problem_data": st.session_state.problem_data
        }
        
        response = requests.post(
            webhook_url,
            json=payload,
            timeout=30
        )
        
        if response.status_code == 200:
            return response.json()
        else:
            return {"error": f"–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {response.status_code}"}
            
    except requests.exceptions.Timeout:
        return {"error": "–¢–∞–π–º–∞—É—Ç –∑–∞–ø—Ä–æ—Å–∞ –∫ n8n"}
    except requests.exceptions.ConnectionError:
        return {"error": "–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ n8n"}
    except Exception as e:
        return {"error": f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {str(e)}"}

def display_chat_message(message, is_user=True):
    """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç–µ"""
    if is_user:
        st.markdown(f"""
        <div class="chat-message user-message">
            {message}
        </div>
        """, unsafe_allow_html=True)
    else:
        st.markdown(f"""
        <div class="chat-message assistant-message">
            {message}
        </div>
        """, unsafe_allow_html=True)

def check_required_fields():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π"""
    required = ['equipment_type', 'device_number', 'description', 'incident_date']
    missing = [field for field in required if not st.session_state.problem_data.get(field)]
    return missing

def generate_final_request():
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏—Ç–æ–≥–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ"""
    data = st.session_state.problem_data
    request = f"""
**–ó–ê–ü–†–û–° –ù–ê –û–ë–°–õ–£–ñ–ò–í–ê–ù–ò–ï**

**Email –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:** {st.session_state.email}

**–¢–∏–ø –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è:** {data['equipment_type']}

**–ù–æ–º–µ—Ä —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞:** {data['device_number']}

**–û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã:** {data['description']}

**–î–∞—Ç–∞ –∏–Ω—Ü–∏–¥–µ–Ω—Ç–∞:** {data['incident_date']}

**–§–æ—Ç–æ (–µ—Å–ª–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–æ):** {data['photo_url'] or '–ù–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–æ'}

**–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞:** {datetime.now().strftime('%d.%m.%Y %H:%M')}
    """
    return request.strip()

def main():
    st.title("üîß –ó–∞–ø—Ä–æ—Å –Ω–∞ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ email
    if not st.session_state.email:
        st.markdown("### –í–≤–µ–¥–∏—Ç–µ –≤–∞—à email –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è")
        email = st.text_input("Email:", placeholder="example@company.com")
        
        if st.button("–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å"):
            if email and validate_email(email):
                st.session_state.email = email
                st.rerun()
            else:
                st.error("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email –∞–¥—Ä–µ—Å")
        return
    
    # –û—Å–Ω–æ–≤–Ω–æ–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –ø–æ—Å–ª–µ –≤–≤–æ–¥–∞ email
    st.markdown(f"**–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:** {st.session_state.email}")
    
    # –ß–∞—Ç –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
    st.markdown("### –ß–∞—Ç —Å –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–æ–º")
    
    # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞
    for message in st.session_state.chat_history:
        display_chat_message(message['content'], message['is_user'])
    
    # –ï—Å–ª–∏ —á–∞—Ç –ø—É—Å—Ç–æ–π, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
    if not st.session_state.chat_history:
        display_chat_message("–î–æ–±—Ä—ã–π –¥–µ–Ω—å, —á–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?", False)
        st.session_state.chat_history.append({
            'content': "–î–æ–±—Ä—ã–π –¥–µ–Ω—å, —á–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?",
            'is_user': False
        })
    
    # –ü–æ–ª–µ –≤–≤–æ–¥–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
    user_input = st.text_input("–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:", placeholder="–û–ø–∏—à–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º—É...", key="user_input")
    
    col1, col2 = st.columns([1, 4])
    with col1:
        if st.button("–û—Ç–ø—Ä–∞–≤–∏—Ç—å"):
            if user_input:
                # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                st.session_state.chat_history.append({
                    'content': user_input,
                    'is_user': True
                })
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ n8n –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
                with st.spinner("–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∑–∞–ø—Ä–æ—Å..."):
                    response = send_to_n8n(user_input, st.session_state.chat_history)
                
                if "error" in response:
                    st.error(f"–û—à–∏–±–∫–∞: {response['error']}")
                else:
                    # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
                    assistant_response = response.get('response', '–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏')
                    st.session_state.chat_history.append({
                        'content': assistant_response,
                        'is_user': False
                    })
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø—Ä–æ–±–ª–µ–º–µ –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å –≤ –æ—Ç–≤–µ—Ç–µ
                    if 'problem_data' in response:
                        st.session_state.problem_data.update(response['problem_data'])
                
                st.rerun()
    
    with col2:
        if st.button("–û—á–∏—Å—Ç–∏—Ç—å —á–∞—Ç"):
            st.session_state.chat_history = []
            st.session_state.problem_data = {
                'equipment_type': None,
                'device_number': None,
                'description': None,
                'incident_date': None,
                'photo_url': None
            }
            st.rerun()
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
    missing_fields = check_required_fields()
    
    if not missing_fields:
        st.markdown("---")
        st.markdown("### ‚úÖ –í—Å–µ –¥–∞–Ω–Ω—ã–µ —Å–æ–±—Ä–∞–Ω—ã")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–±—Ä–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        st.markdown("**–°–æ–±—Ä–∞–Ω–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:**")
        data = st.session_state.problem_data
        st.write(f"**–¢–∏–ø –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è:** {data['equipment_type']}")
        st.write(f"**–ù–æ–º–µ—Ä —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞:** {data['device_number']}")
        st.write(f"**–û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã:** {data['description']}")
        st.write(f"**–î–∞—Ç–∞ –∏–Ω—Ü–∏–¥–µ–Ω—Ç–∞:** {data['incident_date']}")
        if data['photo_url']:
            st.write(f"**–§–æ—Ç–æ:** {data['photo_url']}")
        
        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏—Ç–æ–≥–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
        if st.button("–°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ"):
            st.session_state.final_request = generate_final_request()
            st.rerun()
    
    # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏—Ç–æ–≥–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
    if st.session_state.final_request:
        st.markdown("---")
        st.markdown("### üìã –ò—Ç–æ–≥–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ")
        st.markdown(st.session_state.final_request)
        
        col1, col2 = st.columns(2)
        with col1:
            if st.button("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å"):
                # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
                with st.spinner("–û—Ç–ø—Ä–∞–≤–ª—è—é –∑–∞–ø—Ä–æ—Å..."):
                    final_response = send_to_n8n(
                        "FINAL_REQUEST", 
                        st.session_state.chat_history
                    )
                
                if "error" in final_response:
                    st.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {final_response['error']}")
                else:
                    st.success("‚úÖ –ó–∞–ø—Ä–æ—Å –Ω–∞ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!")
                    st.session_state.final_request = None
                    st.session_state.chat_history = []
                    st.session_state.problem_data = {
                        'equipment_type': None,
                        'device_number': None,
                        'description': None,
                        'incident_date': None,
                        'photo_url': None
                    }
                    st.rerun()
        
        with col2:
            if st.button("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å"):
                st.session_state.final_request = None
                st.rerun()
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞–∫–∏–µ –ø–æ–ª—è –µ—â–µ –Ω—É–∂–Ω–æ –∑–∞–ø–æ–ª–Ω–∏—Ç—å
    if missing_fields:
        st.markdown("---")
        st.markdown("### üìù –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:")
        field_names = {
            'equipment_type': '–¢–∏–ø –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è',
            'device_number': '–ù–æ–º–µ—Ä —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞', 
            'description': '–û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã',
            'incident_date': '–î–∞—Ç–∞ –∏–Ω—Ü–∏–¥–µ–Ω—Ç–∞'
        }
        for field in missing_fields:
            st.write(f"‚Ä¢ {field_names.get(field, field)}")

if __name__ == "__main__":
    main()
