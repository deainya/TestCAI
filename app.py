import streamlit as st
import requests
import json
import re
from datetime import datetime
import os
from typing import Dict, List, Optional

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(
    page_title="–ó–∞–ø—Ä–æ—Å –Ω–∞ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ",
    page_icon="üîß",
    layout="wide",
    initial_sidebar_state="collapsed"
)

# CSS –¥–ª—è –º–æ–±–∏–ª—å–Ω–æ–π –≤–µ—Ä—Å–∏–∏
st.markdown("""
<style>
    .main .block-container {
        padding-top: 1rem;
        padding-bottom: 1rem;
        max-width: 100%;
    }
    
    .chat-message {
        padding: 1rem;
        margin: 0.5rem 0;
        border-radius: 10px;
        max-width: 80%;
    }
    
    .user-message {
        background-color: #007bff;
        color: white;
        margin-left: auto;
        text-align: right;
    }
    
    .assistant-message {
        background-color: #f8f9fa;
        color: #333;
        margin-right: auto;
    }
    
    .stTextInput > div > div > input {
        font-size: 16px;
    }
    
    @media (max-width: 768px) {
        .main .block-container {
            padding: 0.5rem;
        }
    }
</style>
""", unsafe_allow_html=True)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è session state
if 'email' not in st.session_state:
    st.session_state.email = None
if 'chat_history' not in st.session_state:
    st.session_state.chat_history = []
if 'service_request_data' not in st.session_state:
    st.session_state.service_request_data = {
        'equipment_type': None,
        'device_number': None,
        'problem_description': None,
        'incident_date': None,
        'photo_url': None
    }
if 'chat_active' not in st.session_state:
    st.session_state.chat_active = False

def validate_email(email: str) -> bool:
    """–í–∞–ª–∏–¥–∞—Ü–∏—è email –∞–¥—Ä–µ—Å–∞"""
    pattern = r'^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$'
    return re.match(pattern, email) is not None

def send_to_n8n(message: str, user_email: str) -> Dict:
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ N8N –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ LLM"""
    webhook_url = os.getenv('N8N_WEBHOOK_URL')
    
    if not webhook_url:
        return {
            'success': False,
            'error': 'N8N_WEBHOOK_URL –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.'
        }
    
    payload = {
        'message': message,
        'user_email': user_email,
        'timestamp': datetime.now().isoformat(),
        'session_id': f"{user_email}_{datetime.now().strftime('%Y%m%d_%H%M%S')}"
    }
    
    try:
        response = requests.post(
            webhook_url,
            json=payload,
            timeout=30,
            headers={
                'Content-Type': 'application/json',
                'User-Agent': 'ServiceRequestApp/1.0'
            }
        )
        
        if response.status_code == 200:
            try:
                response_data = response.json()
                return {
                    'success': True,
                    'data': response_data
                }
            except json.JSONDecodeError:
                return {
                    'success': False,
                    'error': '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞'
                }
        elif response.status_code == 404:
            return {
                'success': False,
                'error': '–°–µ—Ä–≤–∏—Å –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.'
            }
        elif response.status_code == 500:
            return {
                'success': False,
                'error': '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.'
            }
        else:
            return {
                'success': False,
                'error': f'–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {response.status_code}'
            }
            
    except requests.exceptions.Timeout:
        return {
            'success': False,
            'error': '–ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É.'
        }
    except requests.exceptions.ConnectionError:
        return {
            'success': False,
            'error': '–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ.'
        }
    except requests.exceptions.RequestException as e:
        return {
            'success': False,
            'error': f'–û—à–∏–±–∫–∞ —Å–µ—Ç–∏: {str(e)}'
        }
    except Exception as e:
        return {
            'success': False,
            'error': f'–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {str(e)}'
        }

def extract_service_data(llm_response: str) -> Dict:
    """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ –∑–∞—è–≤–∫–µ –∏–∑ –æ—Ç–≤–µ—Ç–∞ LLM"""
    data = {
        'equipment_type': None,
        'device_number': None,
        'problem_description': None,
        'incident_date': None,
        'photo_url': None
    }
    
    # –ü–æ–∏—Å–∫ —Ç–∏–ø–∞ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è
    equipment_keywords = ['–ø—Ä–∏–Ω—Ç–µ—Ä', '–∫–æ–º–ø—å—é—Ç–µ—Ä', '—Å–µ—Ä–≤–µ—Ä', '—Ä–æ—É—Ç–µ—Ä', '–º–æ–Ω–∏—Ç–æ—Ä', '—Å–∫–∞–Ω–µ—Ä', '—Ñ–∞–∫—Å', '—Ç–µ–ª–µ—Ñ–æ–Ω']
    for keyword in equipment_keywords:
        if keyword.lower() in llm_response.lower():
            data['equipment_type'] = keyword
            break
    
    # –ü–æ–∏—Å–∫ –Ω–æ–º–µ—Ä–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ (—Å–µ—Ä–∏–π–Ω—ã–π –Ω–æ–º–µ—Ä, –∏–Ω–≤–µ–Ω—Ç–∞—Ä–Ω—ã–π –Ω–æ–º–µ—Ä)
    import re
    device_patterns = [
        r'–Ω–æ–º–µ—Ä[:\s]+([A-Z0-9-]+)',
        r'—Å–µ—Ä–∏–π–Ω—ã–π[:\s]+([A-Z0-9-]+)',
        r'–∏–Ω–≤–µ–Ω—Ç–∞—Ä–Ω—ã–π[:\s]+([A-Z0-9-]+)',
        r'—É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ[:\s]+([A-Z0-9-]+)'
    ]
    
    for pattern in device_patterns:
        match = re.search(pattern, llm_response, re.IGNORECASE)
        if match:
            data['device_number'] = match.group(1)
            break
    
    # –ü–æ–∏—Å–∫ –æ–ø–∏—Å–∞–Ω–∏—è –ø—Ä–æ–±–ª–µ–º—ã
    problem_keywords = ['–Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç', '—Å–ª–æ–º–∞–Ω', '–æ—à–∏–±–∫–∞', '–ø—Ä–æ–±–ª–µ–º–∞', '–Ω–µ –≤–∫–ª—é—á–∞–µ—Ç—Å—è', '–Ω–µ –ø–µ—á–∞—Ç–∞–µ—Ç']
    for keyword in problem_keywords:
        if keyword.lower() in llm_response.lower():
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º –ø—Ä–æ–±–ª–µ–º—ã
            sentences = llm_response.split('.')
            for sentence in sentences:
                if keyword.lower() in sentence.lower():
                    data['problem_description'] = sentence.strip()
                    break
            break
    
    # –ü–æ–∏—Å–∫ –¥–∞—Ç—ã
    date_patterns = [
        r'(\d{1,2}[./]\d{1,2}[./]\d{2,4})',
        r'(\d{1,2}\s+(?:—è–Ω–≤–∞—Ä—è|—Ñ–µ–≤—Ä–∞–ª—è|–º–∞—Ä—Ç–∞|–∞–ø—Ä–µ–ª—è|–º–∞—è|–∏—é–Ω—è|–∏—é–ª—è|–∞–≤–≥—É—Å—Ç–∞|—Å–µ–Ω—Ç—è–±—Ä—è|–æ–∫—Ç—è–±—Ä—è|–Ω–æ—è–±—Ä—è|–¥–µ–∫–∞–±—Ä—è)\s+\d{2,4})',
        r'(—Å–µ–≥–æ–¥–Ω—è|–≤—á–µ—Ä–∞|–ø–æ–∑–∞–≤—á–µ—Ä–∞)'
    ]
    
    for pattern in date_patterns:
        match = re.search(pattern, llm_response, re.IGNORECASE)
        if match:
            data['incident_date'] = match.group(1)
            break
    
    # –ü–æ–∏—Å–∫ URL —Ñ–æ—Ç–æ
    url_pattern = r'https?://[^\s]+\.(jpg|jpeg|png|gif|bmp)'
    url_match = re.search(url_pattern, llm_response, re.IGNORECASE)
    if url_match:
        data['photo_url'] = url_match.group(0)
    
    return data

def check_missing_data() -> List[str]:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö –≤ –∑–∞—è–≤–∫–µ"""
    missing = []
    data = st.session_state.service_request_data
    
    if not data['equipment_type']:
        missing.append('—Ç–∏–ø –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è')
    if not data['device_number']:
        missing.append('–Ω–æ–º–µ—Ä —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞')
    if not data['problem_description']:
        missing.append('–æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã')
    if not data['incident_date']:
        missing.append('–¥–∞—Ç–∞ –∏–Ω—Ü–∏–¥–µ–Ω—Ç–∞')
    
    return missing

def generate_smart_question() -> str:
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–º–Ω–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö"""
    missing = check_missing_data()
    data = st.session_state.service_request_data
    
    if not data['equipment_type']:
        return "–ö–∞–∫–æ–π —Ç–∏–ø –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è —Ç—Ä–µ–±—É–µ—Ç —Ä–µ–º–æ–Ω—Ç–∞? (–ø—Ä–∏–Ω—Ç–µ—Ä, –∫–æ–º–ø—å—é—Ç–µ—Ä, —Å–µ—Ä–≤–µ—Ä, —Ä–æ—É—Ç–µ—Ä –∏ —Ç.–¥.)"
    elif not data['device_number']:
        return "–£–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä –∏–ª–∏ —Å–µ—Ä–∏–π–Ω—ã–π –Ω–æ–º–µ—Ä —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞, –µ—Å–ª–∏ –∑–Ω–∞–µ—Ç–µ."
    elif not data['problem_description']:
        return "–û–ø–∏—à–∏—Ç–µ –ø–æ–¥—Ä–æ–±–Ω–æ, –≤ —á–µ–º –∑–∞–∫–ª—é—á–∞–µ—Ç—Å—è –ø—Ä–æ–±–ª–µ–º–∞ —Å –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ–º."
    elif not data['incident_date']:
        return "–ö–æ–≥–¥–∞ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –ø—Ä–æ–±–ª–µ–º–∞? (–¥–∞—Ç–∞ –∏–ª–∏ –ø—Ä–∏–º–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è)"
    else:
        return "–ï—Å—Ç—å –ª–∏ —É –≤–∞—Å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –ø—Ä–æ–±–ª–µ–º—ã? –ï—Å–ª–∏ –¥–∞, –ø—Ä–∏–ª–æ–∂–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ."

def display_chat_message(message: str, is_user: bool = True):
    """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç–µ"""
    css_class = "user-message" if is_user else "assistant-message"
    st.markdown(f'<div class="chat-message {css_class}">{message}</div>', unsafe_allow_html=True)

def main():
    st.title("üîß –ó–∞–ø—Ä–æ—Å –Ω–∞ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ email
    if not st.session_state.email:
        st.markdown("### –í–≤–µ–¥–∏—Ç–µ –≤–∞—à email –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è")
        
        email = st.text_input(
            "Email:",
            placeholder="example@company.com",
            help="–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email –∞–¥—Ä–µ—Å"
        )
        
        if st.button("–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å", type="primary"):
            if email and validate_email(email):
                st.session_state.email = email
                st.session_state.chat_active = True
                st.rerun()
            else:
                st.error("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email –∞–¥—Ä–µ—Å")
    
    else:
        # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ email –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        st.success(f"–í—ã –≤–æ—à–ª–∏ –∫–∞–∫: {st.session_state.email}")
        
        if st.button("–í—ã–π—Ç–∏", type="secondary"):
            st.session_state.email = None
            st.session_state.chat_history = []
            st.session_state.service_request_data = {
                'equipment_type': None,
                'device_number': None,
                'problem_description': None,
                'incident_date': None,
                'photo_url': None
            }
            st.session_state.chat_active = False
            st.rerun()
        
        # –ß–∞—Ç –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
        if st.session_state.chat_active:
            st.markdown("### –ß–∞—Ç —Å –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–æ–º")
            
            # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞
            for message in st.session_state.chat_history:
                display_chat_message(message['content'], message['is_user'])
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ—Å—Ç–∏ —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö
            missing_data = check_missing_data()
            total_fields = 4  # equipment_type, device_number, problem_description, incident_date
            completed_fields = total_fields - len(missing_data)
            progress = completed_fields / total_fields
            
            # –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
            st.progress(progress)
            st.caption(f"–ü—Ä–æ–≥—Ä–µ—Å—Å: {completed_fields}/{total_fields} –ø–æ–ª–µ–π –∑–∞–ø–æ–ª–Ω–µ–Ω–æ")
            
            if missing_data:
                st.info(f"–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–æ–±—Ä–∞—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é: {', '.join(missing_data)}")
            else:
                st.success("‚úÖ –í—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–æ–±—Ä–∞–Ω—ã!")
                
                # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏—Ç–æ–≥–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
                st.markdown("### –ò—Ç–æ–≥–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ")
                
                data = st.session_state.service_request_data
                request_summary = f"""
**–¢–∏–ø –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è:** {data['equipment_type']}
**–ù–æ–º–µ—Ä —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞:** {data['device_number']}
**–û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã:** {data['problem_description']}
**–î–∞—Ç–∞ –∏–Ω—Ü–∏–¥–µ–Ω—Ç–∞:** {data['incident_date']}
"""
                if data['photo_url']:
                    request_summary += f"**–§–æ—Ç–æ:** {data['photo_url']}\n"
                
                st.markdown(request_summary)
                
                col1, col2 = st.columns(2)
                with col1:
                    if st.button("–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É", type="primary"):
                        # –û—Ç–ø—Ä–∞–≤–∫–∞ –∏—Ç–æ–≥–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
                        final_request = {
                            'user_email': st.session_state.email,
                            'equipment_type': data['equipment_type'],
                            'device_number': data['device_number'],
                            'problem_description': data['problem_description'],
                            'incident_date': data['incident_date'],
                            'photo_url': data['photo_url'],
                            'timestamp': datetime.now().isoformat()
                        }
                        
                        result = send_to_n8n(json.dumps(final_request), st.session_state.email)
                        
                        if result['success']:
                            st.success("‚úÖ –ó–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!")
                            st.balloons()
                            
                            # –û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏
                            st.session_state.chat_history = []
                            st.session_state.service_request_data = {
                                'equipment_type': None,
                                'device_number': None,
                                'problem_description': None,
                                'incident_date': None,
                                'photo_url': None
                            }
                            
                            # –ü–æ–∫–∞–∑–∞—Ç—å –∫–Ω–æ–ø–∫—É –¥–ª—è –Ω–æ–≤–æ–π –∑–∞—è–≤–∫–∏
                            if st.button("–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∑–∞—è–≤–∫—É", type="primary"):
                                st.rerun()
                        else:
                            st.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {result['error']}")
                            st.info("–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
                
                with col2:
                    if st.button("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ"):
                        st.session_state.service_request_data = {
                            'equipment_type': None,
                            'device_number': None,
                            'problem_description': None,
                            'incident_date': None,
                            'photo_url': None
                        }
                        st.rerun()
            
            # –ü–æ–ª–µ –≤–≤–æ–¥–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
            user_message = st.text_input(
                "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:",
                placeholder="–û–ø–∏—à–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º—É...",
                key="user_input"
            )
            
            if st.button("–û—Ç–ø—Ä–∞–≤–∏—Ç—å", type="primary") and user_message:
                # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∏—Å—Ç–æ—Ä–∏—é
                st.session_state.chat_history.append({
                    'content': user_message,
                    'is_user': True
                })
                
                # –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ N8N
                with st.spinner("–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞..."):
                    result = send_to_n8n(user_message, st.session_state.email)
                    
                    if result['success']:
                        # –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –æ—Ç LLM
                        llm_response = result['data'].get('response', '–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∑–∞–ø—Ä–æ—Å.')
                        
                        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∑–∞—è–≤–∫–∏ –∏–∑ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                        extracted_data = extract_service_data(user_message)
                        for key, value in extracted_data.items():
                            if value:
                                st.session_state.service_request_data[key] = value
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω—ã –ª–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã
                        missing_data = check_missing_data()
                        if missing_data:
                            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–º–Ω—ã–π –≤–æ–ø—Ä–æ—Å
                            smart_question = generate_smart_question()
                            assistant_response = f"{llm_response}\n\n{smart_question}"
                        else:
                            assistant_response = f"{llm_response}\n\n‚úÖ –û—Ç–ª–∏—á–Ω–æ! –Ø —Å–æ–±—Ä–∞–ª –≤—Å—é –Ω–µ–æ–±—Ö–æ–¥–∏–º—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é. –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –∑–∞—è–≤–∫—É –Ω–∞ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ."
                        
                        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ –≤ –∏—Å—Ç–æ—Ä–∏—é
                        st.session_state.chat_history.append({
                            'content': assistant_response,
                            'is_user': False
                        })
                        
                        st.rerun()
                    else:
                        st.error(f"–û—à–∏–±–∫–∞: {result['error']}")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Å–∫–∞–∑–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            if not st.session_state.chat_history:
                st.markdown("""
                **üí° –ü–æ–¥—Å–∫–∞–∑–∫–∞:** –û–ø–∏—à–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º—É —Å –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ–º. –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç –ø–æ–º–æ–∂–µ—Ç —Å–æ–±—Ä–∞—Ç—å –≤—Å—é –Ω–µ–æ–±—Ö–æ–¥–∏–º—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é:
                - –¢–∏–ø –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è (–ø—Ä–∏–Ω—Ç–µ—Ä, –∫–æ–º–ø—å—é—Ç–µ—Ä, —Å–µ—Ä–≤–µ—Ä –∏ —Ç.–¥.)
                - –ù–æ–º–µ—Ä –∏–ª–∏ —Å–µ—Ä–∏–π–Ω—ã–π –Ω–æ–º–µ—Ä —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
                - –ü–æ–¥—Ä–æ–±–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã
                - –î–∞—Ç–∞ –≤–æ–∑–Ω–∏–∫–Ω–æ–≤–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º—ã
                - –§–æ—Ç–æ –ø—Ä–æ–±–ª–µ–º—ã (–µ—Å–ª–∏ –µ—Å—Ç—å)
                """)

if __name__ == "__main__":
    main()
