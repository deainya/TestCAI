import streamlit as st
import requests
import json
import re
from datetime import datetime
from typing import List, Dict, Any, Optional
import time

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(
    page_title="–ó–∞–ø—Ä–æ—Å –Ω–∞ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ",
    page_icon="üîß",
    layout="wide",
    initial_sidebar_state="collapsed"
)

# CSS –¥–ª—è –º–æ–±–∏–ª—å–Ω–æ–π –≤–µ—Ä—Å–∏–∏
st.markdown("""
<style>
    .chat-container {
        max-width: 100%;
        margin: 0 auto;
        padding: 10px;
    }
    
    .user-message {
        background-color: #007bff;
        color: white;
        padding: 10px;
        border-radius: 10px 10px 0 10px;
        margin: 5px 0;
        text-align: right;
        margin-left: 20%;
    }
    
    .assistant-message {
        background-color: #f1f3f4;
        color: black;
        padding: 10px;
        border-radius: 10px 10px 10px 0;
        margin: 5px 0;
        text-align: left;
        margin-right: 20%;
    }
    
    .chat-input {
        position: fixed;
        bottom: 0;
        left: 0;
        right: 0;
        background: white;
        padding: 10px;
        border-top: 1px solid #ddd;
        z-index: 1000;
    }
    
    .main-container {
        padding-bottom: 100px;
    }
    
    @media (max-width: 768px) {
        .chat-container {
            padding: 5px;
        }
        
        .user-message {
            margin-left: 10%;
        }
        
        .assistant-message {
            margin-right: 10%;
        }
    }
</style>
""", unsafe_allow_html=True)

# –§—É–Ω–∫—Ü–∏—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ email
def validate_email(email: str) -> bool:
    pattern = r'^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$'
    return re.match(pattern, email) is not None

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞ –≤ n8n
def send_to_n8n(message: str, chat_history: List[Dict], problem_data: Dict) -> Dict:
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–ø—Ä–æ—Å –≤ n8n –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—Ç–≤–µ—Ç
    """
    try:
        webhook_url = st.secrets.get("N8N_WEBHOOK_URL")
        if not webhook_url:
            return {
                "success": False,
                "error": "N8N_WEBHOOK_URL –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω"
            }
        
        payload = {
            "message": message,
            "chat_history": chat_history,
            "problem_data": problem_data
        }
        
        response = requests.post(
            webhook_url,
            json=payload,
            timeout=30,
            headers={'Content-Type': 'application/json'}
        )
        
        if response.status_code == 200:
            return {
                "success": True,
                "data": response.json()
            }
        else:
            return {
                "success": False,
                "error": f"–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {response.status_code}"
            }
            
    except requests.exceptions.Timeout:
        return {
            "success": False,
            "error": "–¢–∞–π–º–∞—É—Ç –∑–∞–ø—Ä–æ—Å–∞ –∫ n8n"
        }
    except requests.exceptions.ConnectionError:
        return {
            "success": False,
            "error": "–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ n8n"
        }
    except Exception as e:
        return {
            "success": False,
            "error": f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {str(e)}"
        }

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π —á–∞—Ç–∞
def display_chat_message(content: str, is_user: bool):
    if is_user:
        st.markdown(f'<div class="user-message">{content}</div>', unsafe_allow_html=True)
    else:
        st.markdown(f'<div class="assistant-message">{content}</div>', unsafe_allow_html=True)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–ª–Ω–æ—Ç—ã –¥–∞–Ω–Ω—ã—Ö –æ –ø—Ä–æ–±–ª–µ–º–µ
def is_problem_data_complete(problem_data: Dict) -> bool:
    required_fields = ["equipment_type", "device_number", "description", "incident_date"]
    return all(problem_data.get(field) for field in required_fields)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è session state
if 'email' not in st.session_state:
    st.session_state.email = None
if 'chat_history' not in st.session_state:
    st.session_state.chat_history = []
if 'problem_data' not in st.session_state:
    st.session_state.problem_data = {
        "equipment_type": "",
        "device_number": "",
        "description": "",
        "incident_date": "",
        "photo_url": ""
    }
if 'show_final_form' not in st.session_state:
    st.session_state.show_final_form = False

# –ì–ª–∞–≤–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
def main():
    st.title("üîß –ó–∞–ø—Ä–æ—Å –Ω–∞ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ email
    if not st.session_state.email:
        st.markdown("### –í–≤–µ–¥–∏—Ç–µ –≤–∞—à email –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è")
        email = st.text_input("Email:", placeholder="example@company.com")
        
        if st.button("–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å"):
            if validate_email(email):
                st.session_state.email = email
                st.rerun()
            else:
                st.error("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email –∞–¥—Ä–µ—Å")
        
        return
    
    # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ email –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    col1, col2 = st.columns([3, 1])
    with col1:
        st.info(f"–í—ã –≤–æ—à–ª–∏ –∫–∞–∫: {st.session_state.email}")
    with col2:
        if st.button("–°–º–µ–Ω–∏—Ç—å email"):
            st.session_state.email = None
            st.session_state.chat_history = []
            st.session_state.problem_data = {
                "equipment_type": "",
                "device_number": "",
                "description": "",
                "incident_date": "",
                "photo_url": ""
            }
            st.session_state.show_final_form = False
            st.rerun()
    
    # –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –æ –ø—Ä–æ–±–ª–µ–º–µ —Å–æ–±—Ä–∞–Ω—ã, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏—Ç–æ–≥–æ–≤—É—é —Ñ–æ—Ä–º—É
    if is_problem_data_complete(st.session_state.problem_data) and not st.session_state.show_final_form:
        st.session_state.show_final_form = True
    
    if st.session_state.show_final_form:
        display_final_form()
    else:
        display_chat_interface()

def display_final_form():
    """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏—Ç–æ–≥–æ–≤–æ–π —Ñ–æ—Ä–º—ã –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ"""
    st.markdown("### üìã –ò—Ç–æ–≥–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ")
    
    st.markdown("**–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π:**")
    
    col1, col2 = st.columns(2)
    
    with col1:
        st.markdown(f"**–¢–∏–ø –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è:** {st.session_state.problem_data['equipment_type']}")
        st.markdown(f"**–ù–æ–º–µ—Ä —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞:** {st.session_state.problem_data['device_number']}")
    
    with col2:
        st.markdown(f"**–î–∞—Ç–∞ –∏–Ω—Ü–∏–¥–µ–Ω—Ç–∞:** {st.session_state.problem_data['incident_date']}")
        if st.session_state.problem_data['photo_url']:
            st.markdown(f"**–§–æ—Ç–æ:** {st.session_state.problem_data['photo_url']}")
    
    st.markdown(f"**–û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã:** {st.session_state.problem_data['description']}")
    
    st.markdown("---")
    
    col1, col2, col3 = st.columns([1, 1, 1])
    
    with col1:
        if st.button("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å", type="primary"):
            # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏—Ç–æ–≥–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
            st.success("–ó–∞–ø—Ä–æ—Å –Ω–∞ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!")
            st.balloons()
            
            # –°–±—Ä–æ—Å –¥–∞–Ω–Ω—ã—Ö
            st.session_state.chat_history = []
            st.session_state.problem_data = {
                "equipment_type": "",
                "device_number": "",
                "description": "",
                "incident_date": "",
                "photo_url": ""
            }
            st.session_state.show_final_form = False
            st.rerun()
    
    with col2:
        if st.button("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å"):
            st.session_state.show_final_form = False
            st.rerun()
    
    with col3:
        if st.button("üîÑ –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ"):
            st.session_state.chat_history = []
            st.session_state.problem_data = {
                "equipment_type": "",
                "device_number": "",
                "description": "",
                "incident_date": "",
                "photo_url": ""
            }
            st.session_state.show_final_form = False
            st.rerun()

def display_chat_interface():
    """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —á–∞—Ç-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
    st.markdown("### üí¨ –ß–∞—Ç —Å –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–æ–º")
    st.markdown("–û–ø–∏—à–∏—Ç–µ –≤–∞—à—É –ø—Ä–æ–±–ª–µ–º—É, –∏ —è –ø–æ–º–æ–≥—É —Å–æ–±—Ä–∞—Ç—å –≤—Å—é –Ω–µ–æ–±—Ö–æ–¥–∏–º—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é.")
    
    # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞
    if st.session_state.chat_history:
        st.markdown('<div class="main-container">', unsafe_allow_html=True)
        for message in st.session_state.chat_history:
            display_chat_message(message['content'], message['is_user'])
        st.markdown('</div>', unsafe_allow_html=True)
    else:
        # –ü–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
        if not st.session_state.chat_history:
            initial_message = "–î–æ–±—Ä—ã–π –¥–µ–Ω—å! –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å? –û–ø–∏—à–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–±–ª–µ–º—É —Å –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ–º."
            st.session_state.chat_history.append({
                "content": initial_message,
                "is_user": False
            })
            display_chat_message(initial_message, False)
    
    # –í–≤–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏—è
    st.markdown("---")
    user_message = st.text_input("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:", placeholder="–û–ø–∏—à–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º—É...")
    
    col1, col2 = st.columns([1, 4])
    
    with col1:
        if st.button("–û—Ç–ø—Ä–∞–≤–∏—Ç—å", type="primary"):
            if user_message.strip():
                # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∏—Å—Ç–æ—Ä–∏—é
                st.session_state.chat_history.append({
                    "content": user_message,
                    "is_user": True
                })
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –≤ n8n
                with st.spinner("–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≤–∞—à –∑–∞–ø—Ä–æ—Å..."):
                    result = send_to_n8n(
                        user_message,
                        st.session_state.chat_history,
                        st.session_state.problem_data
                    )
                
                if result["success"]:
                    response_data = result["data"]
                    assistant_response = response_data.get("response", "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞.")
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø—Ä–æ–±–ª–µ–º–µ
                    if "problem_data" in response_data:
                        st.session_state.problem_data.update(response_data["problem_data"])
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ –≤ –∏—Å—Ç–æ—Ä–∏—é
                    st.session_state.chat_history.append({
                        "content": assistant_response,
                        "is_user": False
                    })
                    
                    st.rerun()
                else:
                    st.error(f"–û—à–∏–±–∫–∞: {result['error']}")
    
    with col2:
        if st.button("üîÑ –û—á–∏—Å—Ç–∏—Ç—å —á–∞—Ç"):
            st.session_state.chat_history = []
            st.session_state.problem_data = {
                "equipment_type": "",
                "device_number": "",
                "description": "",
                "incident_date": "",
                "photo_url": ""
            }
            st.rerun()

if __name__ == "__main__":
    main()
