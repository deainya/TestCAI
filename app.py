import streamlit as st
import requests
import json
import re
from datetime import datetime
from typing import Dict, List, Optional, Tuple
import time

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(
    page_title="–ó–∞–ø—Ä–æ—Å –Ω–∞ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ",
    page_icon="üîß",
    layout="wide",
    initial_sidebar_state="collapsed"
)

# CSS –¥–ª—è –º–æ–±–∏–ª—å–Ω–æ–π –≤–µ—Ä—Å–∏–∏
st.markdown("""
<style>
    .main .block-container {
        padding-top: 1rem;
        padding-bottom: 1rem;
        max-width: 100%;
    }
    
    .chat-message {
        padding: 1rem;
        margin: 0.5rem 0;
        border-radius: 10px;
        max-width: 80%;
    }
    
    .user-message {
        background-color: #007bff;
        color: white;
        margin-left: auto;
        text-align: right;
    }
    
    .assistant-message {
        background-color: #f8f9fa;
        color: black;
        margin-right: auto;
    }
    
    .chat-container {
        height: 400px;
        overflow-y: auto;
        border: 1px solid #ddd;
        border-radius: 10px;
        padding: 1rem;
        margin-bottom: 1rem;
    }
    
    @media (max-width: 768px) {
        .main .block-container {
            padding: 0.5rem;
        }
        
        .chat-message {
            max-width: 90%;
        }
    }
</style>
""", unsafe_allow_html=True)

def validate_email(email: str) -> bool:
    """–í–∞–ª–∏–¥–∞—Ü–∏—è email –∞–¥—Ä–µ—Å–∞"""
    pattern = r'^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$'
    return re.match(pattern, email) is not None

def send_to_n8n(message: str, chat_history: List[Dict], problem_data: Dict) -> Tuple[bool, str, Dict]:
    """
    –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –≤ n8n –∏ –ø–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞
    
    Returns:
        Tuple[bool, str, Dict]: (success, response_text, updated_problem_data)
    """
    n8n_url = st.secrets.get("N8N_WEBHOOK_URL")
    
    if not n8n_url:
        return False, "–û—à–∏–±–∫–∞: N8N_WEBHOOK_URL –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω", {}
    
    payload = {
        "message": message,
        "chat_history": chat_history,
        "problem_data": problem_data
    }
    
    try:
        response = requests.post(
            n8n_url,
            json=payload,
            timeout=30,
            headers={'Content-Type': 'application/json'}
        )
        
        if response.status_code == 200:
            data = response.json()
            return True, data.get("response", "–û—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω"), data.get("problem_data", {})
        else:
            return False, f"–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {response.status_code}", {}
            
    except requests.exceptions.Timeout:
        return False, "–û—à–∏–±–∫–∞: –ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞", {}
    except requests.exceptions.ConnectionError:
        return False, "–û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–µ—Ç—Å—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É", {}
    except requests.exceptions.RequestException as e:
        return False, f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {str(e)}", {}
    except json.JSONDecodeError:
        return False, "–û—à–∏–±–∫–∞: –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞", {}
    except Exception as e:
        return False, f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {str(e)}", {}

def initialize_session_state():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Å—Å–∏–∏"""
    if 'email' not in st.session_state:
        st.session_state.email = ""
    if 'chat_history' not in st.session_state:
        st.session_state.chat_history = []
    if 'problem_data' not in st.session_state:
        st.session_state.problem_data = {
            "equipment_type": "",
            "device_number": "",
            "description": "",
            "incident_date": "",
            "photo_url": ""
        }
    if 'show_final_form' not in st.session_state:
        st.session_state.show_final_form = False
    if 'final_request_approved' not in st.session_state:
        st.session_state.final_request_approved = False

def display_chat_message(content: str, is_user: bool):
    """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç–µ"""
    css_class = "user-message" if is_user else "assistant-message"
    st.markdown(f'<div class="chat-message {css_class}">{content}</div>', unsafe_allow_html=True)

def display_chat_history():
    """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞"""
    with st.container():
        st.markdown('<div class="chat-container">', unsafe_allow_html=True)
        
        for message in st.session_state.chat_history:
            display_chat_message(message["content"], message["is_user"])
        
        st.markdown('</div>', unsafe_allow_html=True)

def is_problem_data_complete(problem_data: Dict) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª–Ω–æ—Ç—ã –¥–∞–Ω–Ω—ã—Ö –æ –ø—Ä–æ–±–ª–µ–º–µ"""
    required_fields = ["equipment_type", "device_number", "description", "incident_date"]
    return all(problem_data.get(field, "").strip() for field in required_fields)

def format_final_request(problem_data: Dict, email: str) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Ç–æ–≥–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞"""
    return f"""
**–ó–ê–ü–†–û–° –ù–ê –û–ë–°–õ–£–ñ–ò–í–ê–ù–ò–ï**

**Email:** {email}
**–¢–∏–ø –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è:** {problem_data.get('equipment_type', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}
**–ù–æ–º–µ—Ä —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞:** {problem_data.get('device_number', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}
**–û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã:** {problem_data.get('description', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}
**–î–∞—Ç–∞ –∏–Ω—Ü–∏–¥–µ–Ω—Ç–∞:** {problem_data.get('incident_date', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}
**–§–æ—Ç–æ:** {problem_data.get('photo_url', '–ù–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–æ')}

**–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞:** {datetime.now().strftime('%d.%m.%Y %H:%M')}
"""

def main():
    initialize_session_state()
    
    st.title("üîß –ó–∞–ø—Ä–æ—Å –Ω–∞ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ")
    st.markdown("---")
    
    # –í–≤–æ–¥ email
    if not st.session_state.email:
        st.subheader("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à email –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è")
        email = st.text_input("Email:", placeholder="example@company.com", key="email_input")
        
        if st.button("–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å", type="primary"):
            if email and validate_email(email):
                st.session_state.email = email
                st.rerun()
            else:
                st.error("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email –∞–¥—Ä–µ—Å")
    
    else:
        st.success(f"–í—ã –≤–æ—à–ª–∏ –∫–∞–∫: {st.session_state.email}")
        
        # –ö–Ω–æ–ø–∫–∞ –≤—ã—Ö–æ–¥–∞
        if st.button("–í—ã–π—Ç–∏", type="secondary"):
            st.session_state.email = ""
            st.session_state.chat_history = []
            st.session_state.problem_data = {
                "equipment_type": "",
                "device_number": "",
                "device_number": "",
                "description": "",
                "incident_date": "",
                "photo_url": ""
            }
            st.session_state.show_final_form = False
            st.session_state.final_request_approved = False
            st.rerun()
        
        st.markdown("---")
        
        # –ß–∞—Ç-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
        if not st.session_state.show_final_form:
            st.subheader("üí¨ –ß–∞—Ç —Å –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–æ–º")
            st.markdown("–û–ø–∏—à–∏—Ç–µ –≤–∞—à—É –ø—Ä–æ–±–ª–µ–º—É, –∏ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –ø–æ–º–æ–∂–µ—Ç —Å–æ–±—Ä–∞—Ç—å –≤—Å—é –Ω–µ–æ–±—Ö–æ–¥–∏–º—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é.")
            
            # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞
            display_chat_history()
            
            # –ü–æ–ª–µ –≤–≤–æ–¥–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
            user_message = st.text_input("–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:", placeholder="–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ...", key="user_input")
            
            col1, col2 = st.columns([1, 4])
            with col1:
                send_button = st.button("–û—Ç–ø—Ä–∞–≤–∏—Ç—å", type="primary")
            
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
            if send_button and user_message.strip():
                # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∏—Å—Ç–æ—Ä–∏—é
                st.session_state.chat_history.append({
                    "content": user_message,
                    "is_user": True
                })
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ n8n
                with st.spinner("–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞..."):
                    success, response, updated_data = send_to_n8n(
                        user_message,
                        st.session_state.chat_history,
                        st.session_state.problem_data
                    )
                
                if success:
                    # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ –≤ –∏—Å—Ç–æ—Ä–∏—é
                    st.session_state.chat_history.append({
                        "content": response,
                        "is_user": False
                    })
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø—Ä–æ–±–ª–µ–º–µ
                    st.session_state.problem_data.update(updated_data)
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–ø–æ–ª–Ω–µ–Ω—ã –ª–∏ –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ
                    if is_problem_data_complete(st.session_state.problem_data):
                        st.session_state.show_final_form = True
                        st.rerun()
                else:
                    st.error(f"–û—à–∏–±–∫–∞: {response}")
            
            # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–µ–∫—É—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö –æ –ø—Ä–æ–±–ª–µ–º–µ
            if any(st.session_state.problem_data.values()):
                st.markdown("---")
                st.subheader("üìã –°–æ–±—Ä–∞–Ω–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è")
                
                data_display = {
                    "–¢–∏–ø –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è": st.session_state.problem_data.get("equipment_type", "‚ùå –ù–µ —É–∫–∞–∑–∞–Ω–æ"),
                    "–ù–æ–º–µ—Ä —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞": st.session_state.problem_data.get("device_number", "‚ùå –ù–µ —É–∫–∞–∑–∞–Ω–æ"),
                    "–û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã": st.session_state.problem_data.get("description", "‚ùå –ù–µ —É–∫–∞–∑–∞–Ω–æ"),
                    "–î–∞—Ç–∞ –∏–Ω—Ü–∏–¥–µ–Ω—Ç–∞": st.session_state.problem_data.get("incident_date", "‚ùå –ù–µ —É–∫–∞–∑–∞–Ω–æ"),
                    "–§–æ—Ç–æ": st.session_state.problem_data.get("photo_url", "‚ùå –ù–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–æ")
                }
                
                for key, value in data_display.items():
                    st.write(f"**{key}:** {value}")
        
        # –§–æ—Ä–º–∞ –∏—Ç–æ–≥–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
        else:
            st.subheader("üìù –ò—Ç–æ–≥–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ")
            
            final_request = format_final_request(st.session_state.problem_data, st.session_state.email)
            st.markdown(final_request)
            
            st.markdown("---")
            
            col1, col2, col3 = st.columns([1, 1, 1])
            
            with col1:
                if st.button("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å", type="primary"):
                    st.session_state.final_request_approved = True
                    st.success("‚úÖ –ó–∞–ø—Ä–æ—Å –Ω–∞ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!")
                    st.balloons()
            
            with col2:
                if st.button("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", type="secondary"):
                    st.session_state.show_final_form = False
                    st.rerun()
            
            with col3:
                if st.button("üîÑ –ù–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å", type="secondary"):
                    st.session_state.chat_history = []
                    st.session_state.problem_data = {
                        "equipment_type": "",
                        "device_number": "",
                        "description": "",
                        "incident_date": "",
                        "photo_url": ""
                    }
                    st.session_state.show_final_form = False
                    st.session_state.final_request_approved = False
                    st.rerun()

if __name__ == "__main__":
    main()
