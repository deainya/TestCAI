import streamlit as st
import requests
import json
import re
from datetime import datetime
from typing import Dict, List, Any, Optional
import os

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(
    page_title="–ó–∞–ø—Ä–æ—Å –Ω–∞ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ",
    page_icon="üîß",
    layout="wide",
    initial_sidebar_state="collapsed"
)

# CSS –¥–ª—è –º–æ–±–∏–ª—å–Ω–æ–π –≤–µ—Ä—Å–∏–∏
st.markdown("""
<style>
    .chat-container {
        max-width: 100%;
        margin: 0 auto;
        padding: 10px;
    }
    
    .user-message {
        background-color: #007bff;
        color: white;
        padding: 10px;
        border-radius: 10px 10px 0 10px;
        margin: 5px 0;
        text-align: right;
        margin-left: 20%;
    }
    
    .assistant-message {
        background-color: #f1f3f4;
        color: black;
        padding: 10px;
        border-radius: 10px 10px 10px 0;
        margin: 5px 0;
        text-align: left;
        margin-right: 20%;
    }
    
    .email-input {
        max-width: 400px;
        margin: 0 auto;
    }
    
    .problem-summary {
        background-color: #e8f4fd;
        border: 1px solid #bee5eb;
        border-radius: 5px;
        padding: 15px;
        margin: 10px 0;
    }
    
    @media (max-width: 768px) {
        .chat-container {
            padding: 5px;
        }
        
        .user-message, .assistant-message {
            margin-left: 5%;
            margin-right: 5%;
        }
    }
</style>
""", unsafe_allow_html=True)

def validate_email(email: str) -> bool:
    """–í–∞–ª–∏–¥–∞—Ü–∏—è email –∞–¥—Ä–µ—Å–∞"""
    pattern = r'^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$'
    return re.match(pattern, email) is not None

def send_to_n8n(message: str, chat_history: List[Dict], problem_data: Dict) -> Optional[Dict]:
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –≤ n8n"""
    webhook_url = os.getenv('N8N_WEBHOOK_URL')
    
    if not webhook_url:
        st.error("N8N_WEBHOOK_URL –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
        return None
    
    payload = {
        "message": message,
        "chat_history": chat_history,
        "problem_data": problem_data
    }
    
    try:
        response = requests.post(
            webhook_url,
            json=payload,
            timeout=30,
            headers={'Content-Type': 'application/json'}
        )
        
        if response.status_code == 200:
            return response.json()
        else:
            st.error(f"–û—à–∏–±–∫–∞ n8n: {response.status_code} - {response.text}")
            return None
            
    except requests.exceptions.Timeout:
        st.error("–¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ n8n")
        return None
    except requests.exceptions.ConnectionError:
        st.error("–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ n8n")
        return None
    except Exception as e:
        st.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {str(e)}")
        return None

def display_chat_message(content: str, is_user: bool):
    """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç–µ"""
    if is_user:
        st.markdown(f'<div class="user-message">{content}</div>', unsafe_allow_html=True)
    else:
        st.markdown(f'<div class="assistant-message">{content}</div>', unsafe_allow_html=True)

def display_problem_summary(problem_data: Dict):
    """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–≤–æ–¥–∫–∏ –ø–æ –ø—Ä–æ–±–ª–µ–º–µ"""
    st.markdown("### üìã –°–≤–æ–¥–∫–∞ –ø–æ –ø—Ä–æ–±–ª–µ–º–µ")
    
    summary_html = '<div class="problem-summary">'
    summary_html += '<h4>–°–æ–±—Ä–∞–Ω–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:</h4>'
    summary_html += '<ul>'
    
    if problem_data.get('equipment_type'):
        summary_html += f'<li><strong>–¢–∏–ø –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è:</strong> {problem_data["equipment_type"]}</li>'
    if problem_data.get('device_number'):
        summary_html += f'<li><strong>–ù–æ–º–µ—Ä —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞:</strong> {problem_data["device_number"]}</li>'
    if problem_data.get('description'):
        summary_html += f'<li><strong>–û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã:</strong> {problem_data["description"]}</li>'
    if problem_data.get('incident_date'):
        summary_html += f'<li><strong>–î–∞—Ç–∞ –∏–Ω—Ü–∏–¥–µ–Ω—Ç–∞:</strong> {problem_data["incident_date"]}</li>'
    if problem_data.get('photo_url'):
        summary_html += f'<li><strong>–§–æ—Ç–æ:</strong> <a href="{problem_data["photo_url"]}" target="_blank">–ü—Ä–æ—Å–º–æ—Ç—Ä</a></li>'
    
    summary_html += '</ul></div>'
    st.markdown(summary_html, unsafe_allow_html=True)

def main():
    st.title("üîß –ó–∞–ø—Ä–æ—Å –Ω–∞ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è session state
    if 'user_email' not in st.session_state:
        st.session_state.user_email = None
    if 'chat_history' not in st.session_state:
        st.session_state.chat_history = []
    if 'problem_data' not in st.session_state:
        st.session_state.problem_data = {
            'equipment_type': '',
            'device_number': '',
            'description': '',
            'incident_date': '',
            'photo_url': ''
        }
    if 'show_summary' not in st.session_state:
        st.session_state.show_summary = False
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ email
    if not st.session_state.user_email:
        st.markdown('<div class="email-input">', unsafe_allow_html=True)
        st.subheader("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à email –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è")
        
        email = st.text_input("Email:", placeholder="example@company.com")
        
        if st.button("–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å", type="primary"):
            if validate_email(email):
                st.session_state.user_email = email
                st.rerun()
            else:
                st.error("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email –∞–¥—Ä–µ—Å")
        
        st.markdown('</div>', unsafe_allow_html=True)
        return
    
    # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ email –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    st.success(f"–í—ã –≤–æ—à–ª–∏ –∫–∞–∫: {st.session_state.user_email}")
    
    # –ß–∞—Ç –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
    st.markdown('<div class="chat-container">', unsafe_allow_html=True)
    
    # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞
    for message in st.session_state.chat_history:
        display_chat_message(message['content'], message['is_user'])
    
    # –ï—Å–ª–∏ —ç—Ç–æ –ø–µ—Ä–≤—ã–π –∑–∞–ø—É—Å–∫, –ø–æ–∫–∞–∑–∞—Ç—å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
    if not st.session_state.chat_history:
        welcome_message = "–î–æ–±—Ä—ã–π –¥–µ–Ω—å, —á–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?"
        st.session_state.chat_history.append({
            'content': welcome_message,
            'is_user': False
        })
        display_chat_message(welcome_message, False)
    
    # –í–≤–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_input = st.text_input("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:", key="user_input", placeholder="–û–ø–∏—à–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º—É...")
    
    col1, col2 = st.columns([1, 4])
    with col1:
        send_button = st.button("–û—Ç–ø—Ä–∞–≤–∏—Ç—å", type="primary")
    
    with col2:
        if st.button("–°–±—Ä–æ—Å–∏—Ç—å —á–∞—Ç"):
            st.session_state.chat_history = []
            st.session_state.problem_data = {
                'equipment_type': '',
                'device_number': '',
                'description': '',
                'incident_date': '',
                'photo_url': ''
            }
            st.session_state.show_summary = False
            st.rerun()
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
    if send_button and user_input:
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∏—Å—Ç–æ—Ä–∏—é
        st.session_state.chat_history.append({
            'content': user_input,
            'is_user': True
        })
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –≤ n8n
        with st.spinner("–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≤–∞—à –∑–∞–ø—Ä–æ—Å..."):
            n8n_response = send_to_n8n(
                user_input,
                st.session_state.chat_history,
                st.session_state.problem_data
            )
        
        if n8n_response:
            # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø—Ä–æ–±–ª–µ–º–µ
            if 'problem_data' in n8n_response:
                st.session_state.problem_data.update(n8n_response['problem_data'])
            
            # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ –≤ –∏—Å—Ç–æ—Ä–∏—é
            assistant_response = n8n_response.get('text', '–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞.')
            st.session_state.chat_history.append({
                'content': assistant_response,
                'is_user': False
            })
        
        st.rerun()
    
    st.markdown('</div>', unsafe_allow_html=True)
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞
    required_fields = ['equipment_type', 'device_number', 'description', 'incident_date']
    missing_fields = [field for field in required_fields if not st.session_state.problem_data.get(field)]
    
    if not missing_fields and not st.session_state.show_summary:
        st.markdown("---")
        if st.button("üìã –ü–æ–∫–∞–∑–∞—Ç—å —Å–≤–æ–¥–∫—É –ø–æ –ø—Ä–æ–±–ª–µ–º–µ", type="secondary"):
            st.session_state.show_summary = True
            st.rerun()
    
    # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–≤–æ–¥–∫–∏ –∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    if st.session_state.show_summary:
        st.markdown("---")
        display_problem_summary(st.session_state.problem_data)
        
        st.markdown("### üì§ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞")
        st.info("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤—ã—à–µ. –ü–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É.")
        
        col1, col2, col3 = st.columns([1, 1, 1])
        
        with col1:
            if st.button("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å", type="primary"):
                # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏—Ç–æ–≥–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
                st.success("‚úÖ –ó–∞–ø—Ä–æ—Å –Ω–∞ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!")
                st.balloons()
                
                # –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è
                st.session_state.chat_history = []
                st.session_state.problem_data = {
                    'equipment_type': '',
                    'device_number': '',
                    'description': '',
                    'incident_date': '',
                    'photo_url': ''
                }
                st.session_state.show_summary = False
                st.rerun()
        
        with col2:
            if st.button("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", type="secondary"):
                st.session_state.show_summary = False
                st.rerun()
        
        with col3:
            if st.button("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", type="secondary"):
                st.session_state.show_summary = False
                st.rerun()

if __name__ == "__main__":
    main()
